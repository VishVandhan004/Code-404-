1st Problem
Given an list of decimal numbers and an desired number, return the twin values in a such that their sum equals the desired number..
You can make the assumption that every input has exactly one answer, and you can avoid using the same element more than once.
4
1 8 11 15
target:9
0,1

#include<stdio.h> 
int main() { 
    int i,values,target,n; 
    int arr[10]; 
    printf("enter the number of values:\n"); 
    scanf("%d",&n); 
    printf("enter the values:\n"); 
    for(int i=0; i<n; i++) { 
        scanf("%d",&arr[i]); 
    } 
    printf("enter the target: \n"); 
    scanf("%d",&target); 
    for(int i=0; i<n; i++) { 
        for(int j=i+1; j<n; j++) { 
            if(arr[i] + arr[j]==target) { 
                printf("%d,%d",i,j); 
            } 
        } 
    } 
}

2nd problem 
Take three persons age from the user and print the Oldest Person out of three persons using Nested if. 
Enter the 1st person age: 25 
Enter the 2nd person age: 78 
Enter the 3rd person age: 87 
Expected Output : 
The oldest person is: 87

import java.util.*; 
class test { 
    public static void main(String args[]) { 
        int n,a,b,c; 
        Scanner sc=new Scanner(System.in); 
        System.out.print("Enter the 1st person age: "); 
        a = sc.nextInt(); 
        System.out.print("Enter the 2nd person age: "); 
        b=sc.nextInt(); 
        System.out.print("Enter the 3rd person age: "); 
        c=sc.nextInt(); 
        if(a>b) { 
            if(a>c) { 
                System.out.printf("The oldest person is %d",a); 
            } 
            else { 
                System.out.printf("The oldest person is %d",c); 
            } 
        } 
        else { 
            System.out.printf("The oldest person is %d",b); 
          } 
        }  
    }

3rd Problem
Write a Java program that takes a year from user and print whether that year is a leap year or not.
Enter the year: 2016
2016 is a leap year

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the year: ");
        int y = sc.nextInt();
                if(y%4==0)
                {
                    System.out.printf("%d is a leap year",y);
                }
    }
}

4th Problem 
take the different size of balls in array and find the second largest ball in array
Enter number of the balls: 5 
Enter balls with different sizes: 
2 3 7 6 9
Second largest ball = 7

import java.util.*;
class test {
    public static void main(String args[]) {
        int n;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of the balls: ");
        n = sc.nextInt();
        int []arr = new int[n];
        System.out.println("Enter balls with different sizes:");
        for(int i=0;i<n;i++)
        {
            arr[i] = sc.nextInt();
        }
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(arr[i]>arr[j])
                {
                int temp;
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                }
            }
        }
        System.out.printf("Second largest ball = %d",arr[n-2]);
    }
}

5th Problem
In a theatre there are M rows and N seats in each row. The seats are numbered in a strange order (No duplicates). 
You need to find out the total sum of the seat numbers which are maximum in their columns. 
Input Format: 
Line-1 -> Two integers M and N 
Next M lines -> N space separated integers, seat numbers. 
Output Format: 
Print an integer result. 
Sample Input-1: 
3 3 
3 7 18 
9 16 13 
15 11 17 
Sample Output-1: 
49 
Sample Input-2: 
3 4 
1 10 4 2 
9 3 18 17 
15 16 17 12 
Sample Output-2: 
66

#include<stdio.h>
int main(){
    int i,j,r,c,sum=0;
    scanf("%d %d",&r,&c);
    int arr[r][c];
    for(i=0;i<r;i++){
        for(j=0;j<c;j++){
        scanf("%d",&arr[i][j]);
        }
    }
    for(j=0;j<c;j++)
    {
      int max = arr[0][0];
     for(i=0;i<r;i++)
        {
            if(arr[i][j] > max){
                max = arr[i][j];
            }
        }
            sum = sum+max;
    }
    printf("%d",sum);
}

6th Problem 
Given a string S in encoded form, and  an integer array indices[] of string length. You need to find the decoded form of String S,  
by moving each character at ith position in S, to indices[i] position in decoded string.and then print the decoded string. 
Input Format: 
Line-1 -> A String S, enocded string of length L 
Line-2 -> L space separated integers indices[], where 0 <=indices[i] < L  
Output Format: 
Print a String, decoded string. 
Sample Input-1: 
aeilmmor 
6 1 5 7 2 0 3 4 
Sample Output-1: 
memorial 
Explanation: 
Given String, 
aeilmmor 
6 1 5 7 2 0 3 4 
after shifting,	memorial 
Sample Input-2: 
aidin 
4 3 2 0 1 
Sample Output-2: 
india 
Explanation-2: 
Given String,
aidin 
4 3 2 0 1 
after shifting,	india 

#include<stdio.h>
#include<string.h>
int main() {
    char str[30];
    char str1[30];
    int i;
    scanf("%s",str);
    int arr[strlen(str)];
    for(int i=0;i<strlen(str);i++){
       scanf("%d",&arr[i]);
    }
    int j=0;
    for(int i=0;i<strlen(str);i++){
        j=arr[i];
        str1[j]=str[i];
    }
    for(i=0;i<strlen(str);i++){
        printf("%c",str1[i]);
    }
}

7th Problem 
Given an integer array nums, find the  subarray  with the largest sum, and return its sum.
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.                    

class Solution {
    public int maxSubArray(int[] nums) {
     Scanner sc = new Scanner(System.in);
        int max_S = nums[0];
        int current_S = nums[0];
        for(int i=1;i<nums.length;i++)
        {
                current_S = Math.max(nums[i],current_S+nums[i]);
                max_S = Math.max(max_S,current_S);
        }
       return max_S;
    }
}

8th Problem 
Bob given a task to Babe, i.e, Babe has to detect unique value in a given set of values by Bob
input=
8
12 25 8 12 43 5 8 43
output=
25 5 

#include<stdio.h>
int main() {
    int arr[20];
    int n,i,j;
    scanf("%d",&n);
    for(i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    for(i=0;i<n;i++){
        int count=0;
        for(j=0;j<n;j++){
            if(i!=j){
                if(arr[i] == arr[j]){
                    count++;
                }
            }
        }
        if(count==0){
            printf("%d ",arr[i]);
        }
    }
}

9th Problem 
Java Program To Calculate The Sum Of Array Elements By Taking Input Values from user
Enter number of elements: 5
Enter array elements:
10 20 30 40 50
Sum of array elements= 150

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of elements:");
        int n = sc.nextInt();
        int sum = 0;
        System.out.println("Enter array elements: ");
        int arr[] = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        for(int i=0;i<n;i++){
            sum = sum + arr[i];
        }
        System.out.print("Sum of array elements = "+ sum);
    }
}

10th Problem 
read rows and colums of first and second matrix, then read elements into both matrix,perform addition of those two matrix and dispaly first,second and result matrix. 
input: 
2 
2 
2 
2 
1 
2 
3 
4 
1 
2 
3 
4 
output: 
1 2 
3 4 
1 2 
3 4 
2 4 
6 8 
input= 
2 
3 
2 
2 
output= 
Addition would not be possible 

import java.util.*; 
class test { 
    public static void main(String args[]) { 
       Scanner sc = new Scanner(System.in); 
       int row1 = sc.nextInt(); 
       int col1 = sc.nextInt(); 
       int row2 = sc.nextInt(); 
       int col2 = sc.nextInt(); 
     if(row1!=row2 || col1!=col2) 
     { 
         System.out.println("Addition would not be possible"); 
         System.exit(0); 
     } 
       int a1[][] = new int[row1][col1]; 
       int a2[][] = new int[row2][col2]; 
       for(int i=0;i<row1;i++){ 
           for(int j=0;j<col1;j++){ 
               a1[i][j] = sc.nextInt(); 
           } 
       } 
       for(int i=0;i<row2;i++){ 
           for(int j=0;j<col2;j++){ 
               a2[i][j] = sc.nextInt(); 
           } 
       } 
       for(int i=0;i<row1;i++){ 
           for(int j=0;j<col1;j++){ 
               System.out.print(a1[i][j] + " "); 
           } 
           System.out.println(); 
       } 
       for(int i=0;i<row2;i++){ 
           for(int j=0;j<col2;j++){ 
               System.out.print(a2[i][j] + " "); 
           } 
               System.out.println(); 
       } 
     if(row1 == row2 && col1 == col2) 
     { 
       for(int i=0;i<row1;i++){ 
           for(int j=0;j<col1;j++){ 
               System.out.println(a2[i][j] + a1[i][j]); 
           } 
       } 
     } 
        
   } 
}     

11th Problem 
Write a Java program  that will test if a string is a valid PIN or not 
A valid PIN has: Exactly 4 or 6 characters. Only numeric characters (0-9). No whitespace.
121317
true
45135
false 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String PIN = sc.nextLine();
        int len = PIN.length();
        if(len !=4 && len != 6 ) {
            System.out.println("false");
            return;
        }
        for(int i=0;i<len;i++)
        {
            int temp = (int)PIN.charAt(i);
            if(!(temp>=48) || !(temp<=57))
            {
                System.out.println("False");
                return;
            }
        }
        System.out.println("True");

    }
}

12th Problem
Cliff Shaw is working on the singly linked list. He is given a list of boxes arranged as singly linked list, where each box is printed with a positive number on it and arranged in the list are ascending order. and numbers on the boxes may be repeated.
Mr Cliff Shaw is performing an operation on the list. To have only the distinct values in the final list, removed all duplicate values.
Your task is to help Mr Cliff to perform the operation and return the updated list
Input Format:
Line-1: An integer, N number of boxes in list.
Line-2: N space separated integers, boxes as list.
Output Format:
Print the updated list.
Sample Input-1:
8
1 1 1 2 2 3 3 4
Sample Output-1:
1 2 3 4
Sample Input-2:
5
1 1 1 1 1
Sample Output-2:
1

import java.util.*;
class test {
    public static void main(String args[]) {
        LinkedList<Integer> ll = new LinkedList<Integer>();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i = 0;i<n;i++){
        int e = sc.nextInt();
        ll.add(e);
        }
        LinkedList<Integer> newlist = new LinkedList<Integer>();
        for(Integer ele:ll){
            if(!newlist.contains(ele)) {
                newlist.add(ele);
            }
        }
        System.out.print(newlist);
    }
}

13th Problem 
Cliff Shaw is working on the singly linked list. He is given a list of boxes arranged as singly linked list, where each box is 
printed with a positive number on it and arranged in the list are ascending order. and numbers on the boxes may be repeated.
Mr Cliff Shaw is performing an operation on the list. To have only the distinct values in the final list, removed all duplicate values.
Your task is to help Mr Cliff to perform the operation and return the updated list
Input Format:
Line-1: An integer, N number of boxes in list.
Line-2: N space separated integers, boxes as list.
Output Format:
Print the updated list.
Sample Input-1:
8
1 1 1 2 2 3 3 4
Sample Output-1:
1 2 3 4
Sample Input-2:
5
1 1 1 1 1
Sample Output-2:
1

import java.util.*;
class test {
    public static void main(String args[]) {
        LinkedList<Integer> ll = new LinkedList<Integer>();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i = 0;i<n;i++){
        int e = sc.nextInt();
        ll.add(e);
        }
        LinkedList<Integer> newlist = new LinkedList<Integer>();
        for(Integer ele:ll){
            if(!newlist.contains(ele)) {
                newlist.add(ele);
            }
        }
        System.out.print(newlist);
    }
}

14th Problem 
There is a railway route from Vizag to Hyderabad.The stations in the route will be identified by the codes(may be repeated).
You will be given the list of station codes, using singly linked list implementation find the middle station in the given route.
If there are even number of stations, print the second middle station. Your task is to find the middle station code in the given train route.
NOTE: You shoud pass only the head node to the method/function to find the middle station in that route.
Input Format:
Line-1: space separated integers, station codes.
Output Format:
Print an integer, middle station code.
Sample Input-1:
5
1 2 3 4 5
Sample Output-1:
3
Sample Input-2:
6
1 2 3 4 5 6
Sample Output-2:
4
Explanation:
We have even number of stations, so the second middle station is 4

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        LinkedList<Integer> ll = new LinkedList <Integer> ();
        for(int i=0;i<a;i++){
            int b = sc.nextInt();
            ll.add(b);
        }
        int half = a/2;
        System.out.println(ll.get(half));
    }
}      

15th Problem
Ram is playing a game of identifying the pairs of numbers from the givenlist of numbers. Help Ram to identify the number of pairs which satisfy the following criteria list[i]=list[j] and i<j
Example 1:
Input:6
1 2 3 1 1 3
Output: 4
Explanation: There are 4 pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:
Input:4
1 1 1 1
Output: 6
Explanation: Each pair in the array are satisfying the given constraint.
Example 3:
Input:3
1,2,3
Output: 0
Explanation: The array does not have any element that are equal to each other.

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int a,b;
        int arr[] = new int[num];
        for(a=0;a<num;a++){
            arr[a] = sc.nextInt();
        }
        int count = 0;
        for(a=0;a<num;a++){
            for(b=a+1;b<num;b++){
                if(arr[a] == arr[b]){
                    count++;
                }
            }
        }
        System.out.println(count); 
    }
}     

16th Problem 
Given an list of numbers, return the highest common factor of the smallest number and bigest number in list. The highest common factor of two numbers is the biggest positive number that evenly divides both numbers. 
Input: numberss = 2 9 6 5 12 
Output: 2 
Explanation: 
The smallest number in list is 2. 
The largest number in list is 12. 
The highest common factor of 2 and 12 is 2. 

import java.util.*;
class test {
    public static void main(String args[]) {
       Scanner sc = new Scanner(System.in);
       try {  
        String str = sc.nextLine();
        String[] stArr = str.split(" ");
        int len = stArr.length;
        int[] arr = new int[len];
        for(int i=0;i<len;i++){
           int n = Integer.parseInt(stArr[i]);
           arr[i] = n;
       }
       Arrays.sort(arr);
        int min = arr[0];
        int max = arr[len-1];
        int HCF = 0;
        for(int i=1;i<=min || i<= max ;i++){
            if(min%i == 0 && max%i == 0){
                HCF = i;
            }
        }
        System.out.println(HCF);
    }
       finally {
           sc.close();
       }
   }
}     

17th problem 
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.                     
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

class Solution {
    public int search(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[mid] >= nums[low]) { // left half is sorted
                if (target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else { // right half is sorted
                if (target <= nums[high] && target > nums[mid]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
}

18th Problem 
Given an array of N integers where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are m students, the task is to distribute chocolate packets such that: 
Each student gets one packet.
The difference between the number of chocolates in the packet with maximum chocolates and the packet with minimum chocolates given to the students is minimum.
Examples:
Input : arr[] = {7, 3, 2, 4, 9, 12, 56} , m = 3 
Output: Minimum Difference is 2 
Explanation:
We have seven packets of chocolates and we need to pick three packets for 3 students 
If we pick 2, 3 and 4, we get the minimum difference between maximum and minimum packet sizes.
Input : arr[] = {3, 4, 1, 9, 56, 7, 9, 12} , m = 5 
Output: Minimum Difference is 6 

import java.util.*;
public class Test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of an array:");
        int n = sc.nextInt();
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        System.out.println("Enter the no.of students");
        int m = sc.nextInt();
        Arrays.sort(arr);
        int min =Integer.MAX_VALUE;
        for(int i=0;i<=n-m;i++)
        {
            int diff = arr[i+m-1] - arr[i];
            if(diff<min)
            {
                min = diff;
            }
        }
        System.out.printf("Difference is %d",min);
    }
}

19th Problem 
You have given N bricks. You need to construct a staircase as follows: 
1. = 
2. == 
3. === 
4. ==== 
Where = indicates one brick. 
Another condition is row-1 should have 1 brick, row-2 should have 2 bricks and so on.i.e., i-th row should have 'i' bricks. 
Your task is to findout total number of staircases can be formed with the given condition. 
Input Format: 
 An integer N 
Output Format: 
Print an integers, number of staircases 
Sample Input-1: 
 5 
Sample Output-1: 
2 
Explanation: 
row-1:	= 
row-2:	== 
row-3:	== 
Only 2 rows satisfies the condition. 
Sample Input-2: 
 8 
Sample Output-2: 
3 
Explanation: 
row-1:	= 
row-2:	== 
row-3:	=== 
row-4:	== 
Only 3 rows satisfies the condition. 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int row = sc.nextInt();
        int i=0;
        int count = 0;;
        for(i=1;i<=row;i++){
            int bricks = (i*(i+1))/2;
            if(bricks>row){
                break;
            }
            else {
                count++;
            }
        }
        System.out.print(count);
    }
}
or 
import java.util.*;
class test 
{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int row = sc.nextInt();
        int i=1;
        int count = 0;
        while(row>=i){
            row = row - i;
            i++;
            count++;
        }
        System.out.print(count);
    }
}    

20th Problem   
Ranga rao sir asked a student to find duration among Mid1 and Mid2 exam dates. read both dates in string format, i.e, year-month-date as given in sample data. 
input: 
"2020-06-28" 
"2020-06-29" 
output:1 
Input:  
"2019-01-14" 
"2018-12-30" 
Output: 15 

import java.util.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String s1 = sc.nextLine();
        String s2 = sc.nextLine();
        LocalDate a1 = LocalDate.parse(s1);
        LocalDate a2 = LocalDate.parse(s2);
        long dura = ChronoUnit.DAYS.between(a1,a2);
        System.out.println(dura);
    }
}    

21st Problem 
Given a word w, rotate other than consonents in the word and print it. 
The other than consonents are 'i', 'a', 'u', 'e', and 'e', and they can be seen in both lower- and uppercase,More than once. 
Input: 
"ravi" 
Output: 
"riva" 
sample 2: 
Input:  
"telusuko" 
Output:  
"tolusuke" 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        char [] charArr = str.toCharArray();
        int len = charArr.length;
        for(int i=0;i<len;i++)
        {
          for(int j=i+1; j<len;j++)
          {
            char ch = charArr[i];
    if(ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u')
          {
            char d = charArr[j];
            if(d =='a'|| d=='e'||d=='i'||d=='o'||d=='u'){
                char temp = charArr[i];
                charArr[i] = charArr[j];
                charArr[j] = temp;
            }
          }
        }
      }
      String s1 = new String(charArr);
      System.out.println(s1);
   }
}    

22nd Problem 
There is a List L that consists of n only positive numbers. 
It was converted into another List L i.e, of length n - 1, such that coverted[i] = List[i] XOR List[i + 1]. For example, if List= [1,0,2,1], then converted= [1,2,3]. 
You are given the converted list. You are also given an start number, i.e. List[0].Return the original List L. It can be proved that the answer exists and is unique. 
Sample Data:  
input: 
1 2 3 
1 
output: 
1 0 2 1 
Explanation:  
If List= 1 0 2 1 then 1 and converted= (1 XOR 0, 0 XOR 2, 2 XOR 1) = 1 2 3

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String [] numberString = s.split(" ");
        int len = numberString.length;
        int arr[] = new int[len];
        for(int i=0;i<len;i++){
            arr[i] = Integer.parseInt(numberString[i]);
        }
        System.out.print("start= ");
        int a = sc.nextInt();
        System.out.print(a+" ");
        for(int i=0;i<len;i++){
            a = a^arr[i];
            System.out.print(a+" ");
        }
    }
}       

23rd Problem 
We use the integers , , and  to create the following series:
(a+ 2°*b),(a+2°*b+2^1*b),...,(a+2°*b4+2)-b+...+277 -b)
You are given queries. For each query, print the series corresponding to the given , , and  values as a single line of  space-separated integers. 
Input Format 
The first line contains an integer, , denoting the number of queries. 
Each line  of the  subsequent lines contains three space-separated integers describing the respective , , and  values for that query. 
Constraints 
Output Format 
For each query, print the corresponding series on a new line. Each series must be printed in order as a single line of  space-separated integers. 
Sample Input 
2 
0 2 10 
5 3 5 
Sample Output 
2 6 14 30 62 126 254 510 1022 2046 
8 14 26 50 98

import java.util.*; 
class Solution { 
    public static void main(String []argh) { 
        Scanner in = new Scanner(System.in); 
        int t=in.nextInt(); 
        for(int i=0;i<t;i++) { 
            int a = in.nextInt(); 
            int b = in.nextInt(); 
            int n = in.nextInt(); 
            int sum = a; 
            for(int j=0;j<n;j++) { 
            sum += Math.pow(2,j) * b;  
            System.out.print(sum + " "); 
            } 
            System.out.println(); 
        } 
        in.close(); 
    } 
}            

24th problem 
Project school exam being conducted. Exam_starttime and exam_endtime of the student is given in two arrays. pse_strattime[i] indicates the project school exam start time of student i,
pse_endtime[i] indicates the project school end time of student i.Project school incharge wants to know the number of students writing the exam at given time. 
we can say a student is writing exam if given_time is between pse_startTime[i] and pse_endTime[i] inclusive.
Example 1:
Input: pse_startTime = [1,2,3], pse_endtime = [3,2,7], queryTime = 4
Output: 1
Explanation: We have 3 students where:
The first student started writing his exam at time 1 and finished at time 3 and wasn't doing anything at time 4.
The second student started writing his exam at time 2 and finished at time 2 and also wasn't doing anything at time 4.
The third student started writing his exam at time 3 and finished at time 7 and was the only student doing homework at time 4.
Example 2:
Input: startTime = [4], endTime = [4], queryTime = 4
Output: 1
Explanation: The only student writing his exam at the queryTime.
Test Cases:
Case=1
input=1 2 3
3 2 7
4
output=1
Case=2
input=4
4
4
output=1

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String startTime = sc.nextLine();
        String endTime = sc.nextLine();
        String arr1[] = startTime.split(" ");
        String arr2[] = endTime.split(" ");
        int queryTime = sc.nextInt();
        int count = 0;
        int len = arr1.length;
        int newarr1[] = new int[len];
        int newarr2[] = new int[len];
        for(int i=0;i<len;i++) {
            newarr1[i] = Integer.parseInt(arr1[i]);
            newarr2[i] = Integer.parseInt(arr2[i]);
           if(newarr1[i] <= queryTime && newarr2[i] >= queryTime) {
            count++;
          }
        }
        System.out.println(count);
    }
}           

25th Problem 
Komali has n chocolates, where the ith chocolates is of type chocoType[i]. 
Komali mother noticed that komali started to gain weight, so she restricted Komali to only eat n / 2 of the chocolates she has. 
Komali likes her candies very much, and she wants to eat the maximum number of different types of chocolates while still following her mother's order.
Given the integer array chocoType of length n, return the maximum number of different types of chocolates she can eat if she only eats n / 2 of them.
Example 1:
Input: chocoType = [1,1,2,2,3,3]
Output: 3
Explanation: Alice can only eat 6 / 2 = 3 chocolates. Since there are only 3 types, she can eat one of each type.
Example 2:
Input: chocoType = [1,1,2,2,3]
Output: 2
Explanation: Alice can only eat 5 / 2 = 2(eating half chocolate is not allowed) chocolates. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.
Example 3:
Input: chocoType = [6,6,6,6]
Output: 1
Explanation: Alice can only eat 4 / 2 = 2 chocolates. Even though she can eat 2 candies, she only has 1 type.
case=1
input= 2 2 2 3 3 3
output=2

import java.util.*;
class test {
    public static void main(String args[]) {
       Scanner sc = new Scanner(System.in);
       String str = sc.nextLine();
       String arr[] = str.split(" ");
       int len = arr.length;
       int nums[] = new int[len+1];
       int count=0;
       for(int i=0;i<len;i++) {
           nums[i] = Integer.parseInt(arr[i]);
       }
       for(int i=0; i<len; i++) {
           if(nums[i] != nums[i+1]) {
                 count++;
             }
       }
       if(len/2>= count)
       System.out.print(count);
        if(len/2<count)
        System.out.print(len/2);
    }
}       

26th Problem 
Given a list of non-negative numbers, identify all the sublists of odd size from it, calculate the total of all the elements of sublists. 
Example 1:
Input: list = [1,4,2,5,3]
Output: 58
Explanation: The odd-size sublists of list and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58
Example 2:
Input: list = [1,2]
Output: 3
Explanation: There are only 2 sublists of odd size, [1] and [2]. Their sum is 3.
Example 3:
Input: list = [10,11,12]
Output: 66
Case=1
input=1 4 2 5 3
output=58

import java.util.*;
class test {
    public static void main(String args[]) {
     Scanner sc = new Scanner(System.in);
     String arr[] = sc.nextLine().split(" ");
     int length = arr.length;
     int[] Nlist = new int[length];
     int sum1 = 0;
     for(int i=0;i<length;i++) {
         Nlist[i] = Integer.parseInt(arr[i]);
     }
     for(int i=0;i<length;i++) {
         for(int j=i;j<length;j=j+2) {
             for(int k=i;k<=j;k++) {
                 sum1 = sum1 + Nlist[k];
             }
         }
     }
     System.out.println(sum1);
    }
}

27th Problem 
There are n_coke bottles that are initially full of coke. You can exchange n_exchange empty coke bottles from the market with one full coke bottle.
The operation of drinking a full coke bottle turns it into an empty bottle.
Given the two integers n_coke and n_exchange, return the maximum number of coke bottles you can drink.
Example 1:
Input: no_coke= 9, n_exchange= 3
Output: 13
Explanation: You can exchange 3 empty coke bottles to get 1 full coke bottle.
Number of coke bottles you can drink: 9 + 3 + 1 = 13.
Example 2:
Input: no_coke = 15, n_exchange= 4
Output: 19
Explanation: You can exchange 4 empty coke bottles to get 1 full coke bottle. 
Number of coke bottles you can drink: 15 + 3 + 1 = 19.
Test cases:
case=1
input=15
4

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int total = sc.nextInt();
        int exchange = sc.nextInt();
        int count = total;
        while(total >= exchange) {
            count = count+total/exchange;
            total = total/exchange + total % exchange;
        }
        System.out.print(count);
    }
}    

28th Problem 
A string is given, find the number of substrings of size 4 without repetitive characters. if the substring is appearing for multiple times, each one should be counted seperately
A substring is always a contiguous sequence of characters from the string.
Example 1:
I/p: s = "aabcdcdbe"
Output: 2
Explanation: There are 6 substrings of size 4: "aabc", "abcd", "bcdc", "cdcd","dcdb", and "cdbe". 
The substrings with given criteria are: "abcd", "cdbe".
Example 2:
I/p: s = "abcdabcd"
Output: 5
Explanation: There are 5 substrings of size 4: "abcd","bcda","cdab","dabc", "abcd". 
The substrings with given criteria are: "abcd","bcda","cdab","dabc", "abcd"
Test cases:
case=1
input=aabcdcdbe
output=2

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        int length = str.length();
        int count=0;
        for(int i=0;i<length-3;i++) {
            boolean[] visited = new boolean[26];
            boolean isUnique = true;
            for(int j=i;j<i+4;j++) {
                if(visited[str.charAt(j)-'a']) {
                 isUnique = false;
                 break;
                }
              visited[str.charAt(j) - 'a'] = true;
            }
            if(isUnique) {
                System.out.println(str.substring(i,i+4));
                count++;
            }
        }
        System.out.println(count);
    }
}      

29th Problem 
Jelly is working on matrices, She likes to transform the matrices. This time, She is given a square matrix size n*n,and transforming the given matrix by rotating clockwise. 
For Example: 
	Given matrix size=3,  
	1 2 3 
	4 5 6 
	7 8 9 
	after rotating clockwise, matrix looks like: 
	7 4 1 
	8 5 2 
	9 6 3 
NOTE: Do not allocate another matrix and do the rotation. 
Input Format: 
Line-1: An integer n. 
Next N lines: n space separated integers. 
Output Format: 
Print the transformed Matrix. 
Sample Input-1: 
4 
5 1 9 11 
2 4 8 10 
13 3 6 7 
15 14 12 16 
Sample Output-1: 
15 13 2 5 
14 3 4 1 
12 6 8 9 
16 7 10 11 
1. For a NxN matrix,we need to N/2 cycles of swapping... 
2. In first cycle,Swap the elements of the first row with lastrow,and in the second cycle , 
	the 2nd  row with the 2nd last row are  to be swapped... and so on... 
3. Once the cycles are completed ,Using for loop transform the elements of  
	first row into first column,second row to second column and so on... 			 
4. Display the rotated image of the matrix. 

// REVERSE ITERATION
import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int matrix[][] = new int[num][num];
        for(int i=0;i<num;i++) {
            for(int j=0;j<num;j++) {
                matrix[i][j] = sc.nextInt();
            }
        }
        for(int i=0;i<num;i++) {
            for(int j=num-1;j>=0;j--) {
                System.out.print(matrix[j][i] + " ");
            }
            System.out.println();
        }
    }
}         

30th Problem
Bob given a date in string form i.e, in the following format YYYY-MM-DD,  
print the day number int that year. 
Sample Input: date = "2018-01-10" 
Output: 10 
Explanation: Given date is the 10th day of the year 2018. 
Sample Input: date = "2018-02-11" 
Output: 42 
Note: 
date from Jan 1st, 1900 to Dec 31th, 2019.

import java.util.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String s1 = sc.nextLine();
        LocalDate a1 = LocalDate.parse(s1);
        int date = a1.getDayOfYear();
        System.out.println(date);
    }
}                 

31st Problem
Ngit college decided to announce the toppers of 2nd year students , 
Here Management following a strategy to identify the toppers, i.e, 
They have three different set of lists with there roll numbers, 
first list is PS, second list is CS and third list is OUS.
They decided toppers of 2nd year as, the students those who are there in all three lists.
Note: lists are in sorted according to roll numbers.
Input:
1 2 3 4 5 6
2 5 7 8 9 10
1 2 4 5 8 11
Output:
2 5

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String str1 = sc.nextLine();
        String arr1[] = str1.split(" ");
        String str2 = sc.nextLine();
        String arr2[] = str2.split(" ");
        String str3 = sc.nextLine();
        String arr3[] = str3.split(" ");
        for(int i=0;i<arr1.length;i++) {
            for(int j=0;j<arr2.length;j++) {
                for(int k=0;k<arr3.length;k++) {
                    if(arr1[i].equals(arr2[j]) && arr2[j].equals(arr3[k]) && arr3[k].equals(arr1[i])) {
                        System.out.println(arr1[i]+ " ");
                    }
                }
            }
        }
    }
}       

32nd Problem 
Write a function maxsubstring (str,alpha,theta) str is the source string and have to return maximum sub string which starts with alpha and ends with theta.
input=computer                                                                                                         
m                                                                                                                      
r    	
output=                                                                                                              
Max. Substring  is:mputer  

import java.util.*;
class Test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        char alpha = sc.next().charAt(0);
        char theta = sc.next().charAt(0);
        int start = str.indexOf(alpha);
        int end = str.lastIndexOf(theta);
        if(start == -1 || end == -1 || start > end) {
            System.out.println("No substring found");
        }
        else {
        System.out.println("Max. Substring is:" + str.substring(start,end+1));
        }
    }
}

33rd Problem -> Maximum and minimum of an array using minimum number of comparisons

import java.util.*; 
class First  { 
    public static void main(String args[]) { 
        Scanner sc = new Scanner(System.in); 
        System.out.println("Enter the size: "); 
        int n = sc.nextInt(); 
        int arr[] = new int[n]; 
        int max = 0; 
        int min = 0; 
        for(int i=0;i<n;i++) { 
            arr[i] = sc.nextInt(); 
        } 
        min = arr[0]; 
        for(int i=0;i<n;i++) { 
           if(arr[i]>max) { 
            max = arr[i]; 
           } 
           if(arr[i]<=min) { 
            min = arr[i]; 
           } 
        } 
        sc.close(); 
        System.out.println("Maximum element is: "+ max); 
        System.out.println("Minimum element is: "+ min); 
    } 
} 

34th Problem 
Bob given two strings to jack, asking jack to comapre s1 and s2 to find are they following same sequence of pattern or not. if they are following print true otherwise false. 
baab 
rat mat mat rat 
Output: true 
Input:  
abba  
mat rat rat sat 
Output: false 

import java.util.HashMap; 
import java.util.*; 
class Test { 
    public static void main(String args[]) { 
        Scanner sc = new Scanner(System.in); 
        String str1 = sc.nextLine(); 
        String str2 = sc.nextLine(); 
        String str2arr[] = str2.split(" "); 
        int len = str1.length(); 
        HashMap<Character, String> map = new HashMap<>(); 
        boolean match = true; 
        for(int i=0;i<len;i++) { 
            char c = str1.charAt(i); 
            String s = str2arr[i]; 
            if(map.containsKey(c)) { 
                if(!map.get(c).equals(s)) { 
                    match = false; 
                    break; 
                } 
            } 
            else { 
                if(map.containsValue(s)) { 
                    match = false; 
                    break; 
                } 
            } 
            map.put(c,s); 
        } 
        System.out.println(match); 
    } 
}                

35th Problem 
Given a word consisting of lowercase characters from a to z, your task is to print the first character to emerge twice. 
A character a appears twice before another character b if the second occurrence 
of a is before the second occurrence of b. 
w will contain at least one character that emerge twice. 
sample1: 
Input: s = "baccadbbcz" 
Output: "c" 
Explanation: 
The character 'b' appears on the indexes 0, 6 and 7. 
The character 'a' appears on the indexes 1 and 4. 
The character 'c' appears on the indexes 2, 3 and 8. 
The character 'z' appears on the index 9. 
The character 'c' is the first character to emerge twice, 
because out of all the characters the index of its second occurrence is the smallest. 
sample 2: 
Input: s = "cbaee" 
Output: "e" 
Explanation: 
The only character that emerged twice is 'e' so we print 'e'. 
w consists of lowercase characters. 
w has at least one repeated character. 

import java.util.*; 
import java.util.HashMap; 
class Test { 
    public static void main(String args[]) {  
        Scanner sc = new Scanner(System.in); 
        String s1 = sc.nextLine(); 
        char arr[] = s1.toCharArray(); 
        HashMap<Character, Integer> al = new HashMap<>(); 
        for(int i=0;i<s1.length();i++) { 
            char c = arr[i]; 
            if(al.containsKey(c)) { 
                System.out.println(c); 
                return; 
            } 
            al.put(c,i); 
        } 
    } 
}                

36th Problem 
Given a string, find size of palindrome with maximum length. alphabets are case sensitive, for example, "bB" is not considered a palindrome here.
Example 1:
Input: s = "abccccdd"
Output: 7
Explanation: One longest palindrome that can be built is "dccaccd", whose length is 7.
Example 2:
Input: s = "a"
Output: 1
Explanation: The longest palindrome that can be built is "a", whose length is 1.
testcases:
case=1
input=abccccdd
output=7 

import java.util.*;
class test {
    public static void main(String args[]) {
       Scanner sc = new Scanner(System.in);
       String str = sc.nextLine();
       int len = 0;
       Set<Character> set = new HashSet<>();
       for(char c: str.toCharArray()) {
           if(set.contains(c)) {
               set.remove(c);
               len+=2;
           } else {
               set.add(c);
           }
       }
       if(!set.isEmpty()) {
           len++;
       }
       System.out.println(len);
    }
}                           

37th Problem -> Reversing the Arrays

import java.util.*; 
public class Solutions { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.println("Enter the size of the array:\n"); 
        int len = sc.nextInt(); 
        int arr[] = new int[len]; 
        int start = 0; 
        int end = len-1; 
        for (int i=0;i<len;i++) { 
            arr[i] = sc.nextInt(); 
        } 
        while(start < end) { 
            int temp = arr[start]; 
            arr[start] = arr[end]; 
            arr[end] = temp; 
            start++; 
            end--; 
        } 
        for (int i = 0; i < len; i++) { 
            System.out.println(arr[i]); 
        } 
        sc.close(); 
    } 
}        
CONTAINS DUPLICATE ELEMENTS  IN AN ARRAY OR NOT..
class Solution { 
    public boolean containsDuplicate(int[] nums) { 
       Arrays.sort(nums); 
       for(int i=0;i<nums.length-1;i++) { 
           if(nums[i] == nums[i+1]) { 
               return true; 
           } 
       } 
       return false; 
    } 
}

38th Problem 
A string is given. identify the numbers of instances possible for the word "student"
You can use each character in the string at most once. Return the total number of instances that can be formed.
Explanation1:
input=escsceca
output=2
from the given string, the word "cse" can be formed twice
Explanation2:
input=asceasdf
output=1
Testcases:
case=1
input=escsceca
output=2 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        char[] st = s.toCharArray();
        Map<Character,Integer> mp = new HashMap<>();
        for(int i=0;i<st.length;i++) {
            if(mp.containsKey(st[i])) {
                int a = mp.get(st[i]);
                mp.put(st[i],a+1);
            }
            else {
                mp.put(st[i],1);
            }
        }
        int out=0;
        int min=0;
        for(Map.Entry<Character,Integer> me:mp.entrySet()) {
            char d = me.getKey();
            if(d=='c' || d=='s' || d=='e') {
                out = me.getValue();
                if(out<min) {
                    out = min;
                }
            }
        }
        System.out.print(out);
    }
}

39th Problem 
You are given list of numbers. find the sum of numbers that appear exactly once in the list.
Example 1:
Input: nums = [1,2,3,2]
Output: 4
Explanation: The non repeating numbers are [1,3], and the sum is 4.
Example 2:
Input: nums = [1,1,1,1,1]
Output: 0
Explanation: There are no non-repeating numbers, and the sum is 0.
Example 3:
Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The non repeating numbers are [1,2,3,4,5], and the sum is 15.
Testcases:
case=1
input=1 2 3 2
output=4

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String[] sa = s.split(" ");
        Map<String,Integer> mp = new HashMap<>();
        for(int i=0;i<sa.length;i++) {
            if(mp.containsKey(sa[i])) {
                int a = mp.get(sa[i]);
                mp.put(sa[i],a+1);
            }
            else {
                mp.put(sa[i],1);
            }
        }
        int sum = 0;
        for(Map.Entry<String, Integer> me:mp.entrySet()) {
            if(me.getValue() == 1) {
                int d = Integer.parseInt(me.getKey());
                sum = sum+d;
            }
        }
        System.out.println(sum);
    }
}      

40th Problem 
You are given the array of routes, where route[i] = [stateAi, stateBi] means there exists a direct path 
going from stateAi to stateBi. Return the destination state, that is, the state without any route outgoing 
to another state.
It is guaranteed that the graph of routes forms a line without any loop, therefore, 
there will be exactly one destination city.
Example 1:
Input: routes = [["telangana","andhrapradesh"],["andhrapradesh","tamilnadu"],["tamilnadu","kerala"]]
Output: "kerala" 
Explanation: Starting at "telangana" state you will reach "kerala" state which is the destination city. 
Your trip consist of: "telangana" -> "andhrapradesh" -> "tamilnadu" -> "kerala".
Example 2:
Input: routes = [["ladakh","jammu"],["punjab","delhi"],["jammu","punjab"]]
Output: "delhi"
Explanation: All possible trips are: 
"ladakh" -> "jammu" -> "punjab" -> "delhi". 
"jammu" -> "punjab" -> "delhi"
"punjab" -> "delhi"
"delhi"
Clearly the destination state is "A".
Example 3:
Input: routes = [["telangana","maharashtra"]]
Output: "maharashtra"
testcases:
case=1
input=telangana,andhrapradesh,andhrapradesh,tamilnadu,tamilnadu,kerala
output=kerala 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] routes = input.split(",");
        ArrayList<String> destinations = new ArrayList<String>();
        for(int i=1;i<routes.length;i+=2) {
            destinations.add(routes[i]);
        }
        for(int i=0;i<routes.length;i+=2) {
            destinations.remove(routes[i]);
        }
        String destinationState = destinations.get(0);
        System.out.println(destinationState);
    }
}               

41st Problem 
There are n Circles and each Circle is either pink, Yellow, or White. The Circles are distributed across ten poles labeled from 0 to 9. 
You are given a string Circles of length 2n that describes the n Circles that are placed onto the poles. Every two characters in Circles forms a color-position pair that is used to describe each Circle where: 
The first character of the ith pair denotes the ith Circles color ('P', 'Y', 'W'). 
The second character of the ith pair denotes the pole that the ith Circle is placed on ('0' to '9'). 
For example, "P3Y2W1" describes n == 3 Circles : a pink Circle placed onto the pole labeled 3, a Yellow Circle placed onto the pole labeled 2, and a White Circle placed onto the pole labeled 1. 
Return the number of poles that have all three colors of Circles on them. 
Example: 
Input: input = "W0W6Y0P6P0P6Y9" 
Output: 1 
Explanation:  
- The pole labeled 0 holds 3 Circles with all colors: pink, yellow, and white. 
- The pole labeled 6 holds 3 Circles , but it only has pink and white. 
- The pole labeled 9 holds only a yellow Circle. 
Thus, the number of poles with all three colors is 1. 

import java.util.*; 
class Test { 
    public static void main(String args[]) { 
        Scanner sc = new Scanner(System.in); 
        String str = sc.nextLine(); 
        int count = 0; 
        HashSet<Character> hs = new HashSet<>(); 
        for(int i=0;i<=9;i++) { 
            for(int j=0;j<str.length();j++) { 
                if((str.charAt(j)-48)==i) 
                    hs.add(str.charAt(j-1)); 
            } 
                if(hs.size()==3) 
                count++; 
                hs.clear(); 
        } 
        System.out.println(count); 
    } 
}        

42nd Problem 
Given set of nodes like [2,1,1,2] , using them form a singly linked list,  
left node in the linked list represents MSB and right node  in the linked list represents LSB, 
where 2 is MSB and 2 is LSB. 
by using above nodes you can form singly linked list like 2-->1-->1-->2. 
your task is to print yes if it is palindrome otherwise print no. 
Examples: 
input=2,1,1,2 
output=yes 
input=2,1 
output=no 

import java.util.*; 
class Test { 
    public static void main(String args[]) { 
        Scanner sc = new Scanner(System.in); 
        String s = sc.nextLine(); 
        String str[] = s.split(","); 
        LinkedList <Integer> ll = new LinkedList<Integer>(); 
        for(int i=0;i<str.length;i++) { 
            ll.add(Integer.parseInt(str[i])); 
        } 
        LinkedList<Integer> ll1 = new LinkedList<Integer>(); 
        for(int i=str.length-1;i>=0;i--) { 
            ll1.add(Integer.parseInt(str[i])); 
        } 
        if(ll.equals(ll1)) { 
            System.out.println("yes"); 
        } 
        else { 
            System.out.println("no"); 
        }   
    } 
}           

43rd Problem
You are given an array of numbers. the following can be done in single iteration:
1. select two equal numbers.
2. delete both of them from the array.
3. repeat steps 1 & 2 until there is no equal numbers available in the array.
return the number of pairs deleted and leftover elements in the array
Example 1:
Input: [1,3,2,1,3,2,2]
Output: [3,1]
Explanation:
first 1,1 will be selected and deleted, resulting array = [3,2,3,2,2].
then 3,3 will be selected and deleted, resulting array= [2,2,2].
then 2,2 will be selected and deleted, resulting array= [2].
No more pairs can be formed. A total of 3 pairs deleted, and there is 1 number leftover in nums.
Example 2:
Input: [1,1]
Output:[1,0]
Explanation: first 1,1 will be selected and deleted, resulting array= [].
No more pairs can be formed. A total of 1 pair deleted, and there are 0 numbers leftover in the array.
Example 3:
Input: [0]
Output: [0,1]
Explanation: No pairs can be formed, and there is 1 number leftover in the array.
Testcases:
case=1
input=1,3,2,1,3,2,2
output=3,1 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String[] arr = sc.nextLine().split(",");
        int n = arr.length;
        int[] nums = new int[n];
        for(int i=0;i<n;i++) {
            nums[i] = Integer.parseInt(arr[i]);
        }
        int count=0;
        for(int i=0;i<n;i++) {
            if(nums[i] == -1) {
                continue;
            }
            for(int j=i+1;j<n;j++) {
                if(nums[j] == -1) {
                    continue;
                }
                if(nums[i] == nums[j]) {
                    nums[i] = -1;
                    nums[j] = -1;
                    count++;
                    break;
                }
            }
        }
        int c1=0;
        for(int i=0;i<n;i++) {
            if(nums[i] != -1) {
                c1++;
            }
        }
        System.out.println(count+","+c1);
    }
}

44th Problem (Max element of an array)
import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter the size of the array: ");
        int size = sc.nextInt();
        System.out.println("enter the elements");
        int arr[] = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        System.out.println(arr[arr.length - 1]);
        sc.close();
    }
}               
For 2nd largest element in the array, you just need to sort the array and use this ->  System.out.println(arr[arr.length - 2]); 
             
45th Problem (checking if array is sorted or not) 
import java.util.*;
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int size = sc.nextInt();
        System.out.println("Enter the elements:");
        int arr[] = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = sc.nextInt();
        }
        boolean isSorted = true;
        for (int i = 1; i < size; i++) {
            if (arr[i] < arr[i - 1]) {
                isSorted = false;
                break;
            }
        }
        if (isSorted) {
            System.out.println("The array is sorted.");
        } else {
            System.out.println("The array is not sorted.");
        }
        sc.close();
    }
}
other solution (Leetcode)
 class Solution {
    public boolean check(int[] nums) {
        int n = nums.length;
        int pivot = 0;
        // Find the pivot point
        for (int i = 1; i < n; i++) {
            if (nums[i] < nums[i - 1]) {
                pivot = i;
                break;
            }
        }
        // Check if the elements after the pivot are in non-decreasing order
        for (int i = pivot + 1; i < n; i++) {
            if (nums[i] < nums[i - 1]) {
                return false;
            }
        }
        // Check if the elements before the pivot (if any) are in non-decreasing order
        if (pivot > 0 && nums[n - 1] > nums[0]) {
            return false;
        }
        return true;
    }
}

46th Problem (linear search)
class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int size = sc.nextInt();
        System.out.println("Enter the elements:");
        int arr[] = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = sc.nextInt();
        }
        System.out.println("enter the target:");
       int target = sc.nextInt();
       for (int i = 0; i < size; i++) {
        if(arr[i] == target){
            System.out.println(i);
        }
       }
        sc.close();
    }
}

47th problem (removing the duplicate elements from the array)
class Solution {
    public int removeDuplicates(int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0;
        }
        int uniqueCount = 1;
        int i = 1; 
        int j = 1;
        while (i < n) {
            if (nums[i] != nums[i - 1]) {
                nums[j] = nums[i];
                uniqueCount++;
                j++;
            }
            i++;
        }
        return uniqueCount;
    }
}                                     

48th Problem (Collections)
Array List
import java.util.*;
class Test {
    public static void main(String args[]) {
        ArrayList<Integer> cs = new ArrayList<Integer>();
        cs.add(1);
        cs.add(2);
        cs.add(3);
        cs.add(4);
        cs.add(5);
        System.out.println("Get"+cs.get(1));     
        cs.remove(2);   
        Iterator<Integer> it = cs.iterator();
        while(it.hasNext()) {
            System.out.println(it.next());
        }
        ArrayList<String> cs1 = new ArrayList<String>();
        cs1.add("xyz");
        cs1.add("abc");
        cs1.add("def");
    }
}                              

LinkedList
import java.util.*;
class Test {
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        LinkedList<Integer> ll=new LinkedList<Integer>();
        for(int i=0;i<n;i++) {
            ll.add(sc.nextInt());
        }
        for(int i=0;i<n;i++) {
            System.out.print(ll.get(i)+" ");
        }
        System.out.println();
        System.out.println(ll.size());
        System.out.println(ll.contains(2));
        System.out.println(ll.remove(1));
        System.out.println(ll.indexOf(1));
        ll.set(0,6);
        Iterator<Integer> it=ll.iterator();
        while(it.hasNext()) {
            System.out.print(it.next()+" ");
        }
    }
}     

TreeMap
import java.util.*;
class Test {
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<Integer,String> t=new TreeMap<Integer,String>();
        for(int i=0;i<n;i++) {
            t.put(sc.nextInt(),sc.nextLine());
        }
        System.out.println(t.containsKey(1));
        System.out.println(t.containsValue("A"));
        System.out.println(t.get(2));
        System.out.println(t.remove(3));
        System.out.println(t.size());
        System.out.println(t.values()+" ");
        for(Map.Entry<Integer,String> me:t.entrySet()) {
            System.out.println(me.getKey()+"-"+me.getValue());
        }
    }
}     

HashMap
import java.util.*;
class Test {
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        TreeMap<Integer,String> t=new TreeMap<Integer,String>();
        for(int i=0;i<size;i++) {
            t.put(sc.nextInt(),sc.nextLine());
        }
        System.out.println(t.containsKey(1));
        System.out.println(t.containsValue("A"));
        System.out.println(t.get(2));
        System.out.println(t.remove(3));
        System.out.println(t.size());
        System.out.println(t.values()+" ");
        for(Map.Entry<Integer,String> me:t.entrySet()) {
            System.out.println(me.getKey()+"-"+me.getValue());
        }
        
    }
}     

Legacy Vector
import java.util.*;
class Test {
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        Vector<Integer> v=new Vector<Integer>();
        for(int i=0;i<size;i++) {
            v.add(sc.nextInt());
        }
        System.out.println(v.size());
        System.out.println(v.contains(1));
        System.out.println(v.elementAt(2));
        System.out.println(v.firstElement());
        System.out.println(v.get(4));
        System.out.println(v.indexOf(3));
        System.out.println(v.remove(1));
        System.out.println(v.set(1,2));
        Iterator<Integer> it=v.iterator();
        while(it.hasNext()) {
            System.out.print(it.next()+" ");
        }
    }
}     

Legacy HashTable
import java.util.*;
class Test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        Hashtable<Integer, Integer> ht = new Hashtable<>();
        for (int i = 0; i < size; i++) {
            int key = sc.nextInt();
            int value = sc.nextInt();
            ht.put(key, value);
        }
        System.out.println(ht.size());
        System.out.println(ht.containsKey(1));
        System.out.println(ht.get(2));
        System.out.println(ht.keySet().iterator().next());
        System.out.println(ht.get(4));
        System.out.println(ht.containsValue(3));
        System.out.println(ht.remove(1));
        ht.put(1, 2);
        Enumeration<Integer> keys = ht.keys();
        while (keys.hasMoreElements()) {
            int key = keys.nextElement();
            System.out.print(ht.get(key) + " ");
        }
    }
}

Legacy Dictionary
import java.util.*;
class Test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        Hashtable<Integer, Integer> dictionary = new Hashtable<>();
        for (int i = 0; i < size; i++) {
            int key = sc.nextInt();
            int value = sc.nextInt();
            dictionary.put(key, value);
        }
        System.out.println(dictionary.size());
        System.out.println(dictionary.containsKey(1));
        System.out.println(dictionary.get(2));
        System.out.println(dictionary.get(0));
        System.out.println(dictionary.get(4));
        System.out.println(dictionary.containsValue(3));
        System.out.println(dictionary.remove(1));
        dictionary.put(1, 2);
        Enumeration<Integer> keys = dictionary.keys();
        while (keys.hasMoreElements()) {
            int key = keys.nextElement();
            System.out.print(dictionary.get(key) + " ");
        }
    }
}  

Iterator
import java.util.*;
class Test {
    public static void main(String[] args) {
        ArrayList<String> a = new ArrayList<String>();
        a.add("ab");
        a.add("bc");
        a.add("cd");
        a.add("de");
        Iterator<String> it = a.iterator();
        while (it.hasNext()) {
            System.out.print(it.next() + " ");
        }
    }
}

List Iterator
import java.util.*;
class Test {
    public static void main(String[] args) {
        ArrayList<String> a = new ArrayList<String>();
        a.add("ab");
        a.add("bc");
        a.add("cd");
        a.add("de");
        ListIterator<String> litr = a.listIterator();
        while (litr.hasNext()) {
            System.out.print(litr.next() + " ");
        }
        while (litr.hasPrevious()) {
            System.out.print(litr.previous() + " ");
        }
    }
}

49th Problem 
write a function that given an array of N integers, shall return the biggest value X, which occurs in A exactly X times.
exp-> A=[3,1,4,1,5] shall return 0. no value in the array meeting the function.
exp -> A=[5,5,5,5,5] shall return 5.
exp-> A=[3,8,2,3,3,2] shall return 3. the value 2 occurs 2 times and the value 3 occurs 3 times. they meet the conditions. the value 8 occurs only once.
so, it doesn't meet the conditions. the max of 2 and 3 is 3. so, return 3.

import java.util.*;
public class opentextone {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String [] sa = s.split(" ");
        int arr [] = new int [sa.length];
        for(int i=0;i<arr.length;i++) {
            arr[i]=Integer.valueOf(sa[i]);
        }
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<arr.length;i++) {
            if(map.get(arr[i])!=null)//map.containsKey() {
                map.put(arr[i],map.get(arr[i])+1);
            }
            else {
                map.put(arr[i],1);
            }
        }
         System.out.println(map);
        int max =0;
        for(HashMap.Entry<Integer,Integer> entry  : map.entrySet()) {
            int k = entry.getKey();
            int v = entry.getValue();
            if(k==v && v>1 ) {
                if(k>max) {
                    max=k;
                }
            }
        }
        System.out.println(max);
    }
}

50th Problem 
You are given an array of integers. you have to create pairs of them such that every pair consist of equal numbers. each array element may belong to one pair only.
write a function that given an array returns whether it splits all integers into pairs.
exp-> A=[1,2,2,1], your function should return true, as the pairs are (A[0],A[3]) i.e 1 and (A[1],A[2]) i.e 2
exp -> A=[7,7,7], your function shall return false, as only 1 pair is formed and the other one is left out.

import java.util.*;
public class opentexttwo {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String sa [] = s.split(" ");
        int arr [] = new int [sa.length];
        for(int i=0;i<sa.length;i++) {
            arr[i]=Integer.valueOf(sa[i]);
        }
        System.out.println(task(arr));
    }
    public static boolean task(int arr[]) {
        if(arr.length%2!=0) {
            return false;
        }
        int n= arr.length-1;
        for(int i=0;i<arr.length/2;i++,n--) {
            if(arr[i]!=arr[n]) {
                return false;
            }
        }
        return true;
    }
}                  

51st Problem
write a function solution that, given integer N, returns the smallest non-negative integer whose individual digits sum to N.
exp-> n = 16, the function should return 79. there are many numbers whose sum is 16 but the smallest such number must be 79.
exp-> n = 19, function should return 199. many numbers sum can be 19 but the smallest such number is 199.

import java.util.*;
public class opentextthree {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(task(n));
    }
    public static int task(int n) {
        if(n<10) {
            return n;
        }
        String s="";
        while(n>9) {
            n=n-9; 
            s=s+'9';
        }
        s=s+Integer.toString(n);
        String rs="";
        for(int i=s.length()-1;i>=0;i--) {
            rs=rs+s.charAt(i);
        }
        return Integer.valueOf(rs);
    }
}

52nd Problem
Write a function that given an integer N, returns the smallest integer greater than N, the sum of whose digits is twice as big as the sum of digits of N.
exp-> N = 14, function should return 19. the sum of digits of 19(1+9=10) is twice as big as the sum of 14(1+4=5).
exp-> N = 10, function should return 11. the sum of digits of 11(1+1=2) is twice as big as the sum of 10(1+0=1). 

import java.util.*;
public class opentextfour {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(task(n));
    }
    public static int task(int n) {
        int sum=0;
        while(n!=0) {
            sum =sum + n%10;
            n=n/10;
        }
        int x = 2*sum;
        String s ="";
        if(x<10) {
            x=x-1;
            s='1'+Integer.toString(x);
        }
        else {
            while(x>9) {
                x=x-9;
                s=s+'9';
            }
            s=s+Integer.toString(x);
            String rs="";
            for(int i=s.length()-1;i>=0;i--) {
                rs=rs+s.charAt(i);
            }
            s=rs;
        }
        return Integer.valueOf(s);
    }
}                         

53rd Problem (String reverse) 
import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        int len = A.length();
        boolean isPalindrome = true;
        for(int i=0;i<len/2;i++) {
            if(A.charAt(i) != A.charAt(len-i-1)) {
                isPalindrome = false;
                break;
            } 
        }
        if(isPalindrome) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
        sc.close();
    }
}

54th Problem (Datatypes and range)
import java.util.*;
import java.io.*;
class Solution {
    public static void main(String []args) {
        Scanner sc = new Scanner(System.in);
        int t=sc.nextInt();
        for(int i=0;i<t;i++) {
            try {
                long x=sc.nextLong();
                System.out.println(x+" can be fitted in:");
                if(x>=-128 && x<=127) {
                    System.out.println("* byte");
                }
                if(x>=-32768 && x<=32767) {
                    System.out.println("* short");
                }
                if(x>=-2147483648 && x<=2147483647) {
                    System.out.println("* int");
                }
                if(x>=-9223372036854775808L && x<=9223372036854775807L) {
                    System.out.println("* long");
                }
            }
            catch(Exception e) {
                System.out.println(sc.next()+" can't be fitted anywhere.");
            }
        }
    }
}                            

55th Problem
Given two strings of lowercase English letters,  and , perform the following operations:
Sum the lengths of A and B. Determine if  is lexicographically larger than  (i.e.: does  come before  in the dictionary?).
Capitalize the first letter in  and  and print them on a single line, separated by a space.                  
   
import java.util.*;
class test {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String B=sc.next();
        A = A.substring(0, 1).toUpperCase() + A.substring(1);
        B = B.substring(0, 1).toUpperCase() + B.substring(1);
        int len1 = A.length();
        int len2 = B.length();
        System.out.println(len1+len2);
        int result = A.compareTo(B);
        if(result < 0) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
        }
        System.out.print(A+" "+B);
    }
}                 

56th Problem
Arun wants to design a Right Angle Star Pattern. Let’s help him by accepting a number.
3
*
* *
* * *

import java.util.*;
class RightTrianglePattern {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        for(int i=0;i<size;i++) {
            for(int j=0;j<=i;j++) {
                System.out.print("* ");
            }
                System.out.println();
        }
    }
}

57th Problem
Varun wants to design a LeftTrianglePattern. Let’s help him by accepting a number.
5
           *
         * *
       * * *
     * * * *
   * * * * *

import java.util.*;
class LeftTrianglePattern {
    public static void main(String args[]) {
         Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        for(int i=0;i<size;i++) {
            for(int j=5;j>i;j--) {
                System.out.print(" ");
            }
            for(int j=0;j<i;j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

58th Problem
Online Shopping Cart: You are developing an online shopping cart system. Identify the classes, objects, and behaviors involved.
Scenario: Users can add items to their shopping cart,remove items, and proceed to checkout. Each item has properties like name, price, and quantity. 
The system should calculate the total cost of the items in the cart and apply any applicable discounts or promotions.
input and output:
Enter your choice: 1
Enter item name: icecream
Enter item price: 2
Enter item quantity: 2
Item added to the cart.
1. Add item
2. Remove item
3. Checkout
4. Exit
Enter your choice: 3
Total cost: $4.0
Thank you for shopping with us!

import java.util.*;
class ShoppingCart {
    private List<Item> items;
    public ShoppingCart() {
        items = new ArrayList<>();
    }
    public void addItem(String name, double price, int quantity) {
        Item item = new Item(name, price, quantity);
        items.add(item);
        System.out.println("Item added to the cart.");
    }
    public void removeItem(String name) {
        for (Item item : items) {
            if (item.getName().equalsIgnoreCase(name)) {
                items.remove(item);
                System.out.println("Item removed from the cart.");
                return;
            }
        }
        System.out.println("Item not found in the cart.");
    }
    public double calculateTotalCost() {
        double totalCost = 0.0;
        for (Item item : items) {
            totalCost += item.getPrice() * item.getQuantity();
        }
        return totalCost;
    }
    public void checkout() {
        double totalCost = calculateTotalCost();
        System.out.println("Total cost: $" + totalCost);
        System.out.println("Thank you for shopping with us!");
    }
}
class Item {
    private String name;
    private double price;
    private int quantity;

    public Item(String name, double price, int quantity) {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }
    public String getName() {
        return name;
    }
    public double getPrice() {
        return price;
    }
    public int getQuantity() {
        return quantity;
    }
}
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ShoppingCart cart = new ShoppingCart();
        while (true) {
            System.out.println("1. Add item");
            System.out.println("2. Remove item");
            System.out.println("3. Checkout");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            switch (choice) {
                case 1:
                    System.out.print("Enter item name: ");
                    String name = sc.next();
                    System.out.print("Enter item price: ");
                    double price = sc.nextDouble();
                    System.out.print("Enter item quantity: ");
                    int quantity = sc.nextInt();
                    cart.addItem(name, price, quantity);
                    break;
                case 2:
                    System.out.print("Enter item name to remove: ");
                    String itemName = sc.next();
                    cart.removeItem(itemName);
                    break;
                case 3:
                    cart.checkout();
                    System.exit(0);
                case 4:
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

59th Problem
Banking System: You are building a banking system. Identify the classes, objects, and behaviors involved.
Scenario: Customers can open bank accounts, deposit money,withdraw money, and check their account balance. 
Each account has a unique account number, owner name, and 
balance. The system should handle transactions accurately and update account balances accordingly.
1. Open an account
2. Deposit money
3. Withdraw money
4. Check account balance
0. Exit
Enter your choice:
1
Enter account number: 12345
Enter account owner name: Santosh
Account opened successfully.
1. Open an account
2. Deposit money
3. Withdraw money
4. Check account balance
0. Exit
Enter your choice: 2
Enter account number: 12345
Enter the amount to deposit: 23450
Amount deposited successfully.
1. Open an account
2. Deposit money
3. Withdraw money
4. Check account balance
0. Exit
Enter your choice: 4
Enter account number: 12345
Account balance: 23450.0
1. Open an account
2. Deposit money
3. Withdraw money
4. Check account balance
0. Exit
Enter your choice: 0
Exiting..

import java.util.*;
class BankAcc {
    double Accno;
    String name;
    double balance;
    BankAcc(double Accno, String name, double balance) {
        this.Accno = Accno;
        this.name = name;
        this.balance = balance;
    }
    void deposit(double amt) {
        balance = balance + amt;
        System.out.print("Amount deposited successfully.");
    }
    void withdraw(double amt) {
        if (amt > balance) {
            System.out.print("No Balance");
        } else {
            balance = balance - amt;
            System.out.print("Amount withdrawn successfully.");
        }
    }
    double getBalance() {
        return balance;
    }
}
class BankSystem {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        BankAcc account = null;
        while (true) {
            System.out.println("1. Open an account");
            System.out.println("2. Deposit money");
            System.out.println("3. Withdraw money");
            System.out.println("4. Check account balance");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            switch (choice) {
                case 1:
                    System.out.print("Enter account number: ");
                    double accNo = sc.nextDouble();
                    sc.nextLine();
                    System.out.print("Enter account owner name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter initial balance: ");
                    double initialBalance = sc.nextDouble();
                    account = new BankAcc(accNo, name, initialBalance);
                    System.out.println("Account opened successfully.");
                    break;
                case 2:
                    if (account != null) {
                        System.out.print("Enter the amount to deposit: ");
                        double depositAmt = sc.nextDouble();
                        account.deposit(depositAmt);
                    } else {
                        System.out.println("No account opened. Please open an account first.");
                    }
                    break;
                case 3:
                    if (account != null) {
                        System.out.print("Enter the amount to withdraw: ");
                        double withdrawAmt = sc.nextDouble();
                        account.withdraw(withdrawAmt);
                    } else {
                        System.out.println("No account opened. Please open an account first.");
                    }
                    break;
                case 4:
                    if (account != null) {
                        System.out.println("Account balance: " + account.getBalance());
                    } else {
                        System.out.println("No account opened. Please open an account first.");
                    }
                    break;
                case 0:
                    System.out.println("Exiting..");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

60th Problem
Ravi wants to insert an element into given list of numbers for a given position . 
Enter the size of the array: 5
Enter the elements of the array:
1
2
3
4
5
Enter the element to insert: 7
Enter the index to insert the element at: 1
Modified array: [1, 7, 2, 3, 4, 5] 

import java.util.*;
class Array1 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int n = sc.nextInt();
        System.out.println("Enter the elements of the array: ");
        int arr[] = new int[n+1];
        for(int i=0;i<n;i++) {
            arr[i] = sc.nextInt();
        }
        System.out.println("Enter the element to insert: ");
        int ele = sc.nextInt();
        System.out.println("Enter the index to insert the element at: ");
        int ind = sc.nextInt();
        for(int i=n;i>ind;i--) {
            arr[i] = arr[i-1];
        }
        arr[ind] = ele;
        System.out.print("Modified array: ");
        System.out.print(Arrays.toString(arr));
    }
}

61st Problem
Write a java Program to remove an element in a given position in an array.
Enter the size of the array: 5
Enter the elements of the array:
1
2
3
4
5
Enter the position of the element to be removed: 1
Array after removing the element:
1 3 4 5
Enter the size of the array: 8
Enter the elements of the array:
200
123
34
3
22
1
4
6
Enter the position of the element to be removed: 0
Array after removing the element:
123 34 3 22 1 4 6 

import java.util.*;
class Remove {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array: ");
        int size = sc.nextInt();
        System.out.print("Enter the elements of the array: ");
        int arr[] = new int[size];
        for(int i=0;i<size;i++) {
            arr[i] = sc.nextInt();
        }
        System.out.print("Enter the position of the element to be removed: ");
        int pos = sc.nextInt();
        for(int i=pos;i<size-1;i++) {
            arr[i]=arr[i+1];
        }
        System.out.println("Array after removing the element: ");
        for(int i=0;i<size-1;i++) {
            System.out.print(arr[i]+ " ");
        }
    }
}

62nd Problem
find the sum of elements available at the square position of given 
indices in the array 
Enter the size of the array: 5                                                                                          
Enter the elements of the array:                                                                                        
1 2 3 4 5                                                                                                               
Enter the indices: 0 1                                                                                                      
sum is:3  
Enter the size of the array: 5                                                                                          
Enter the elements of the array:                                                                                        
1 2 3 4 5                                                                                                               
Enter the indices: 1 2                                                                                                      
sum is: 5 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array: ");
        int size = sc.nextInt();
        System.out.print("Enter the elements of the array: ");
        int arr[] = new int[size];
        for(int i=0;i<size;i++) {
            arr[i] = sc.nextInt();
        }
        System.out.print("Enter the indices: ");
        int i1 = sc.nextInt();
        int i2 = sc.nextInt();
        System.out.print("sum is: ");
        int i3 = arr[i1]+arr[i2];
        System.out.print(i3);
    }
}

63rd Problem
Rithika wants to find 3rd largest element from a given group of numbers. lets help her by writing a java program
1.Enter the size of the array: 5
Enter the array elements:
1
2
3
4
5
The third largest element is: 3
2.Enter the size of the array: 5
Enter the array elements:
9
3
1
6
2
The third largest element is: 3 

import java.util.*;
class Test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of the array: ");
        int size = sc.nextInt();
        System.out.println("Enter the array elements: ");
        int arr[] = new int[size];
        for(int i=0;i<size;i++) {
            arr[i] = sc.nextInt();
        }
        int a,b,c=0;
        for(int i=0;i<size;i++) {
            if(arr[i]>a) {
                c=b;
                b=a;
                a=arr[i];
            }
            else if(arr[i]>b) {
                c=b;
                b=arr[i];
            }
            else if(arr[i]>c) {
                c=arr[i];
            }
        }
        System.out.println("The third largest element is: "+c);
    }
}

64th Problem
Write a Java program that takes an input array, finds a number
in the array which is a multiple of three, squares its index, 
and displays the result. 
The program takes the input array and index from the user
Enter the size of the array: 5
Enter the array elements:
3 6 9 12 15
Enter the index: 4
The number at index 4 (which is a multiple of 3) is 12, and its index squared is 16.
Enter the size of the array: 3
Enter the array elements:8 9 2
Enter the index: 3
No number found at index 3 that is a multiple of 3.

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array: ");
        int size = sc.nextInt();
        System.out.print("Enter the array elements: ");
        int arr[] = new int[size];
        for(int i=0;i<size;i++) {
            arr[i] = sc.nextInt();
        }
        System.out.print("Enter the index: ");
        int ind = sc.nextInt();
        if(arr[ind - 1]%3 == 0) {
            System.out.print("The number at index "+ ind +" (which is a multiple of 3) is "+ ind*3 +" ,and its index squared is "+ind*ind+" ");
        }
        else {
            System.out.printf("No number found at index "+ ind +" that is a multiple of 3");
        }
    }
}

65th Problem
Write a Java program to calculate Sum and Average values of an array.
Enter the number of elements in the array: 4
Enter the elements of the array:
23
45
67
89
Sum: 224
Average: 56.0
Enter the number of elements in the array: 5
Enter the elements of the array:
1 2 3 4 5
Sum: 15
Average: 3.0 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int sum = 0;
        int num = sc.nextInt();
        System.out.print("Enter the elements of the array: ");
        int arr[] = new int[num];
        for(int i=0;i<num;i++) {
            arr[i] = sc.nextInt();
            sum = sum + arr[i];
        }
        System.out.println("Sum: " + sum);
        float avg = sum/num;
        System.out.print("Average: " + avg);
    }
}

66th Problem
Write a Java program to reverse an array of integer values.
Enter the size of the array: 4
Enter the elements of the array:
Element 1: 34
Element 2: 56
Element 3: 78
Element 4: 90
Reversed array:
90 78 56 34

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array: ");
        int size = sc.nextInt();
        System.out.print("Enter the elements of the array: ");
        int arr[] = new int[size];
        for(int i=0;i<size;i++)
        {
            System.out.println("Element "+(i+1)+": ");
            arr[i] = sc.nextInt();
        }
        System.out.print("Reversed array: ");
        for(int i = size-1; i>=0; i--)
        {
            System.out.print(arr[i]+" ");
        }
    }
}

67th Problem
Write a Java program to input an array Of N elements and display all even index elements
Enter the size of the array: 3
Enter the elements of the array:
Element at index 0: -2
Element at index 1: 56
Element at index 2: 78
Elements at even indices:
Element at index 0: -2
Element at index 2: 78 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array: ");
        int size = sc.nextInt();
        System.out.println("Enter the elements of the array: ");
        int arr[] = new int[size];
        for(int i=0;i<size;i++) {
            System.out.print("Element at index "+i+": ");
            arr[i] = sc.nextInt();
        }
        System.out.println("Elements at even indices: ");
        for(int i=0;i<size;i++) {
            if(i%2==0) {
                System.out.println("Element at index "+(i)+": " + arr[i]);
            }
        }
    }
}

68th Problem
sum of elements present at even and odd indices
Enter the number of elements in the array: 5
Enter the elements of the array:
2 3 4 5 6
Sum of elements at even indices: 12
Sum of elements at odd indices: 8

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int size = sc.nextInt();
        System.out.print("Enter the elements of the array: ");
        int arr[] = new int[size];
        int sum1 = 0,sum2 = 0;
        for(int i=0;i<size;i++) {
            arr[i] = sc.nextInt();
            if(i%2 == 0) {
                sum1 = sum1+arr[i];
            }
            else {
                sum2 = sum2+arr[i];
            }
        }
        System.out.println("Sum of elements at even indices: "+ sum1);
        System.out.println("Sum of elements at odd indices: "+ sum2);
    }
}

69th Problem
Write a Java program to test if an array contains a specific value.
Enter the size of the array: 4
Enter the elements of the array:
Element 0: 1
Element 1: 2
Element 2: 3
Element 3: 4
Enter the value to search for: 1
The array contains the value 1 at index 0.
Enter the size of the array: 3
Enter the elements of the array:
Element 0: 23
Element 1: 45
Element 2: 89
Enter the value to search for: 9
The array does not contain the value 9.

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array: ");
        int size = sc.nextInt();
        int arr[] = new int[size];
        int flag = -1;
        System.out.println("Enter the elements of the array: ");
        for(int i=0;i<size;i++) {
            System.out.print("Element "+i+": ");
            arr[i] = sc.nextInt();
        }
        System.out.print("Enter the value to search for: ");
        int search = sc.nextInt();
        for(int i=0;i<size;i++) {
            if(arr[i] == search) {
                flag = i;
                break;
            }
            else {
                flag = -1;
            }
        }
        if(flag != -1) {
        System.out.print("The array contains the value "+search+" at index "+flag+".");
           }
        else {
      System.out.print("The array does not contain the value "+search+""); 
        }
  }
}

70th Problem
Write a Program to input N integers in an array,print the greatest and smallest integers from the array
Enter Size of Array:3                                                                                                                                                                                                             
Enter the elements:10 20 30                                                                                                                                                                                                                   
Maximum Number: 30                                                                                                                                                                                                                          
Minimum Number: 10    

 import java.util.*;
 class test {
     public static void main(String args[]) {
         Scanner sc = new Scanner(System.in);
         System.out.print("Enter Size of Array: ");
         int size = sc.nextInt();
         int max = 0;
         int min = 0;
         System.out.print("Enter the elements: ");
         int arr[] = new int[size];
         for(int i=0;i<size;i++) {
             arr[i] = sc.nextInt();
         }
         min = arr[0];
         for(int i=0;i<size;i++) {
             if(arr[i]>max) {
                 max = arr[i];
             }
             if(arr[i]<min) {
                 min = arr[i];
             }
         }
        //  Arrays.sort(arr);
         System.out.println("Maximum Number: "+max);
         System.out.print("Minimum Number: "+ min);
     }
 }

71st Problem
Write a program to input N elements in an array. Print the count of single digit and double digit numbers.
Enter the number of elements in the array: 3                                                                            
Enter element 1: 10                                                                                                    
Enter element 2: 11                                                                                                    
Enter element 3: 100                                                                                                    
Count of single-digit numbers: 0                                                                                        
Count of double-digit numbers: 2 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();
        int arr[] = new int[n];
        int s_d_c = 0;
        int d_d_c = 0;
        for(int i=0;i<n;i++) {
            System.out.print("Enter element "+(i+1)+": ");
            arr[i] = sc.nextInt();
        }
        for(int i=0;i<n;i++){
            if(arr[i]>=0 && arr[i]<10) {
                s_d_c++;
            }
            if(arr[i]>=10 && arr[i]<100) {
                d_d_c++;
            }
        }
        System.out.println("Count of single-digit numbers: "+s_d_c);
        System.out.println("Count of double-digit numbers: "+d_d_c);
    }
}

72nd Problem
Write a Java program to find common elements between two integer arrays.
Enter the number of elements in the first array: 3                                                                      
Enter the elements of the first array:                                                                                  
1 2 3                                                                                                                  
Enter the number of elements in the second array: 3                                                                    
Enter the elements of the second array:                                                                                
2 4 3                                                                                                                  
Common elements:                                                                                                        
2                                                                                                                  
3   

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the first array: ");
        int n1 = sc.nextInt();
        System.out.println("Enter the elements of the first array: ");
        int arr1[] = new int[n1];
        for(int i=0;i<n1;i++) {
            arr1[i] = sc.nextInt();
        }
        System.out.print("Enter the number of elements in the second array: ");
        int n2 = sc.nextInt();
        System.out.println("Enter the elements of the second array: ");
        int arr2[] = new int[n2];
        for(int i=0;i<n2;i++) {
            arr2[i] = sc.nextInt();
        }
        System.out.print("Common elements: ");
        for(int i=0;i<n1;i++) {
            for(int j=0;j<n2;j++) {
            if(arr1[i] == arr2[j]) {
                System.out.println(arr1[i]);
                break;
            }
        }
      }
    }
}

73rd Problem
Write a program to store average marks of N students in a single subscripted variables and print the students falling in the following categories in two columns
Average Marks Number of Students
1-30 xx
31-50 xx
51-70 xx
71-85 xx
86-100 xx
sample input output
Enter the number of students: 5                                                                                        
Enter the average marks for each student:                                                                              
Student 1: 55                                                                                                          
Student 2: 65                                                                                                          
Student 3: 65                                                                                                          
Student 4: 89                                                                                                          
Student 5: 34                                                                                                          
Average Marks   Number of Students                                                                                      
1-30            0                                                                                                      
31-50           1                                                                                                      
51-70           3                                                                                                      
71-85           0                                                                                                      
86-100          1      

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of students: ");
        int n = sc.nextInt();
        System.out.println("Enter the average marks for each student: ");
        int arr[] = new int[n];
        for(int i=0;i<n;i++) {
            System.out.print("Student "+(i+1)+": ");
            arr[i] = sc.nextInt();
        }
        int[] count = new int[5];
        for(int i=0;i<n;i++) {
        int marks = arr[i];
        if(marks>=1 && marks<=30) {
            count[0]++;
        }
        else if(marks>=31 && marks<=50) {
            count[1]++;
        }
        else if(marks>=51 && marks<=70) {
            count[2]++;
        }
        else if(marks>=71 && marks<=85) {
            count[3]++;
        }
        else if(marks>=86 && marks<=100) {
            count[4]++;
        }
    }
    System.out.println("Average Marks\tNumber of Students");
    System.out.println("1-30\t\t"+count[0]);
    System.out.println("31-50\t\t"+count[1]);
    System.out.println("51-70\t\t"+count[2]);
    System.out.println("71-85\t\t"+count[3]);
    System.out.println("86-100\t\t"+count[4]);
    }
}

74th Problem
Write a Java program to create a class called Shape with methods called getPerimeter() and
getArea(). Create a subclass called Circle that overrides the getPerimeter() and getArea()
methods to calculate the area and perimeter of a circle.
sample input and output
Enter the radius of the circle: 3                                                                                      
Perimeter of the circle: 18.84955592153876                                                                              
Area of the circle: 28.274333882308138

import java.util.*;
class Shape {
    public double getPerimeter() {
        return 0.0;
    }
    public double getArea() {
        return 0.0;
    }
}
class Circle extends Shape {
    private double radius;
    public Circle(double radius) {
        this.radius = radius;
    }
    public double getPerimeter() {
        return 2*Math.PI*radius;
    }
    public double getArea() {
        return Math.PI*radius*radius;
    }
}
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the radius of the circle: ");
        double radius = sc.nextDouble();
        Circle c = new Circle(radius);
        double perimeter = c.getPerimeter();
        double area = c.getArea();
        System.out.println("Perimeter of the circle: "+perimeter);
        System.out.println("Area of the circle: "+area);
    }
}

75th Problem
java program to input array of numbers that contains positive and negative numbers. print count of positive and negative numbers
sample output:
Enter the number of elements in the array: 5
Enter the elements of the array:
1 2 -1 -2 3
Positive Count: 3
Negative Count: 2 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();
        int pc = 0;
        int nc = 0;
        System.out.println("Enter the elements of the array: ");
        int arr[] = new int[n];
        for(int i=0;i<n;i++) {
            arr[i] = sc.nextInt();
        if(arr[i]<0) {
            nc++;
        }
        else {
            pc++;
        }
    }
        System.out.println("Positive Count: "+pc);
        System.out.print("Negative Count: "+nc);
    }
}

76th Problem
find sum of even numbers and odd numbers of an input array
Enter the number of elements in the array: 5
Enter the elements of the array:
1 2 3 4 5
Sum of even integers: 6
Sum of odd integers: 9

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();
        int esum = 0;
        int osum = 0;
        System.out.println("Enter the elements of the array: ");
        int arr[] = new int[n];
        for(int i=0;i<n;i++) {
            arr[i] = sc.nextInt();
            if(arr[i]%2==0) {
                esum=esum+arr[i];
            }
            else {
                osum = osum + arr[i];
            }
        }
        System.out.println("Sum of even integers: "+esum);
        System.out.print("Sum of odd integers: "+osum);
    }
}

77th Problem
find the duplicate elements from the given array
sample output:
Enter the number of elements in the array: 6                                                                            
Enter the elements of the array:                                                                                        
5 5 3 3 2 1                                                                                                             
Duplicate elements:                                                                                                        
5 3  

import java.util.Scanner;
public class test {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int length = scanner.nextInt();
        int[] array = new int[length];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < length; i++) {
            array[i] = scanner.nextInt();
        }
        int found = 0;
        System.out.println("Duplicate elements: ");
        for(int i=0;i<array.length;i++) {
            if(array[i] == -1) {
                i++;
            }
            for(int j=i+1;j<array.length;j++) {
                if(array[i]==array[j]) {
                  array[j] = -1;
                  found++;   
                }
            }
            if(found!=0 && array[i]!=-1) {
                System.out.print(array[i]+" ");
            }
            found = 0;
        }
    }
}

78th Problem
find the unique elements from the given array
sample output:
Enter the number of elements in the array: 6                                                                            
Enter the elements of the array:                                                                                        
5 5 3 3 2 1                                                                                                             
Unique elements:                                                                                                        
2 1 

import java.util.Scanner;
public class test {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int length = scanner.nextInt();
        int[] array = new int[length];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < length; i++) {
            array[i] = scanner.nextInt();
        }
       System.out.println("Unique elements: ");
       int count = 0;
        for(int i=0;i<array.length;i++) {
            for(int j=i+1;j<array.length;j++) {
                if(array[i] == array[j]) {
                    array[j] = -1;
                    count++;
                }
            }
           if(array[i]!=-1 && count == 0) {
               System.out.print(array[i]+" ");
           }
           count = 0;
        }
    }
}

79th Problem
find the frequency of each element in the given array
sample output:
5
1 2 2 3 4
1-1
2-2
3-1
4-1
sample output2:
6
3 3 3 4 4 4
3-3
4-3 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        int freq = 1;
        for(int i=0;i<n;i++) {
            arr[i] = sc.nextInt();
        }
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
             if(arr[i] == arr[j]) {
                 arr[j] = -1;
                 freq++;
             }
           }
             if(arr[i]!=-1) {
                 System.out.println(arr[i]+ "-"+freq);
             }
             freq = 1;
        }
    }
}

80th Problem
write a Java Program to Count the Number of Unique Words
Given a string, in which various words are separated by whitespace. Print the count of the unique words 
present in it, that is the words whose frequency is 1.
sample output:
Enter the string                                                                                                        
ava is great C++ is also great                                                                                          
Total number of unique words in "ava is great C++ is also great" are 3                                                  
sample output1:
Enter the string                                                                                                        
good morning                                                                                                            
Total number of unique words in "good morning" are 2

import java.util.*;
class test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the string:");
        String input = sc.nextLine();
        sc.close();
        int uniqueWordCount = 0;
        String[] words = input.split(" ");
        Map<String, Integer> wordCountMap = new HashMap<>();
        //Count the frequency of each word
        for (String word : words) {
            if (!wordCountMap.containsKey(word)) {
                wordCountMap.put(word, 1);
            } else {
                int count = wordCountMap.get(word);
                wordCountMap.put(word, count + 1);
            }
        }
        //Count the number of unique words with frequency 1
        for (String word : wordCountMap.keySet()) {
            if (wordCountMap.get(word) == 1) {
                uniqueWordCount++;
            }
        }
        System.out.println("Total number of unique words in \"" + input + "\" are " + uniqueWordCount);
    }
}

81st Problem
write a java program Remove vowels from a string
sample output:
Enter a string:
welcome
String after removing vowels: wlcm

import java.util.*;
class test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a string:");
        String input = sc.nextLine();
        sc.close();
        String result = removeVowels(input);
        System.out.println("String after removing vowels: " + result);
    }
    public static String removeVowels(String str) {
        StringBuilder sb = new StringBuilder();
        for (char ch : str.toCharArray()) {
            if (!isVowel(ch)) {
                sb.append(ch);
            }
        }
        return sb.toString();
    }
    public static boolean isVowel(char ch) {
        ch = Character.toLowerCase(ch);
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }
}

82nd Problem
Java Program tond the largest and smallest word in a string.
sample output
Enter a string:
welcome to ngit college
Smallest word: to
Largest word: welcome  
sample output1
Enter a string:                                                                                                         
hi welcome to fds j1 batch                                                                                               
Smallest word: hi                                                                                                       
Largest word: welcome

import java.util.*;
class test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a string:");
        String input = sc.nextLine();
        sc.close();
        String[] words = input.split(" ");
        String smallestWord = findSmall(words);
        String largestWord = findLarge(words);
        System.out.println("Smallest word: " + smallestWord);
        System.out.println("Largest word: " + largestWord);
    }
    public static String findSmall(String[] words) {
        String smallestWord = words[0];
        for (int i = 1; i < words.length; i++) {
            if (words[i].length() < smallestWord.length()) {
                smallestWord = words[i];
            }
        }
        return smallestWord;
    }
    public static String findLarge(String[] words) {
        String largestWord = words[0];
        for (int i = 1; i < words.length; i++) {
            if (words[i].length() > largestWord.length()) {
                largestWord = words[i];
            }
        }
        return largestWord;
    }
}

83rd Problem
Given a string, find and remove all the adjacent pairs of repeated characters
sample output:
ABBCCCD
string after removing adjacent pairs of repeated characters: ACD
sample output2:
AAABBBCCDD
string after removing adjacent pairs of repeated characters: AB
sample output3:
AABBBCCDDAXYYZZZZZB
string after removing adjacent pairs of repeated characters: BAXZB

import java.util.*;
class test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String result = removeAdjacentPairs(input);
        System.out.println("String after removing adjacent pairs of repeated characters: " + result);
    }
    public static String removeAdjacentPairs(String input) {
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < input.length()) {
            if (i < input.length() - 1 && input.charAt(i) == input.charAt(i + 1)) {
                i += 2;
            } else {
                sb.append(input.charAt(i));
                i++;
            }
        }
        return sb.toString();
    }
}

84th Problem
Write a Java program to find longest common prefix of given array of strings.
sample output:
kiran kiranmai kireeti                                                                                                  
The longest Common Prefix is : kir                                                                                       

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        String s [] = str.split(" ");
        Arrays.sort(s);
        String c = "";
        for(int i=0;i<s[0].length();i++) {
            if(s[0].charAt(i)==s[s.length-1].charAt(i)) {
                c=c+s[0].charAt(i);
            }
        }
        System.out.println("The longest Common Prefix is: "+c);
    }
}

85th Problem
program to find first non repeating character in the string
sample output:
aabbcdef
c
sample output2:
abcdeffeda
b 

import java.util.*;
class Test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        char arr[] = str.toCharArray();
        int len = str.length();
        boolean found = false;
        for (int i = 0; i < len; i++) {
            boolean isDuplicate = false;
            for (int j = i + 1; j < len; j++) {
                if (arr[i] == arr[j] && arr[j] != '1') {
                    arr[j] = '1';
                    isDuplicate = true;
                    break;
                }
            }
            if (!isDuplicate) {
                System.out.print(arr[i]);
                found = true;
                break;
            }
        }
        if (!found) {
            System.out.print("No non-repeating character found");
        }
    }
}

86th Problem
find smallest and longest word in the string
sample output:
string programs in java
in
programs 

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        String arr [] = str.split(" ");
        int min = arr[0].length();
        int max = arr[0].length();
        int sindex=0;
        int mindex=0;
        for(int i=0;i<arr.length;i++) {
            if(arr[i].length()<min) {
                min = arr[i].length();
                sindex = i;
            }
            if(arr[i].length()>max) {
                max = arr[i].length();
                mindex = i;
            }
        }
        System.out.println(arr[sindex]);
        System.out.println(arr[mindex]);
    }
}

87th Problem
Write a Java program to check whether a string is a Palindrome or not using pointers
Sample output
Enter a string: madam
The string is a palindrome.
Sample output1:
Enter a string: hello
The string is not a palindrome.

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a string: ");
        boolean p = false;
        String str = sc.nextLine();
        for(int i=0,j=str.length()-1;i<j;i++,j--) {
            if(str.charAt(i) == str.charAt(j)) {
                p = true;
                break;
            }
        }
        if(p == true) {
            System.out.print("The string is a palindrome.");
        }
        else {
            System.out.print("The string is not a palindrome.");
        }
    }
}

88th Problem
Write a java program to check weather two strings are
anagram or not
Anagram
The dictionary meaning of the word anagram is a word or phrase 
formed by rearranging the letters.
Two strings are said to be anagrams if they make a meaningful
word by rearranging or shuffling the letters of the string. 
LISTEN - > SILENT
HEART - > EARTH
LIVES - > ELVIS
KEEP -> PEEK
TABLE - >BLEAT
Sample output:
Enter the first string: HEART
Enter the second string: EARTH
HEART and EARTH are anagrams
sample Output:
Enter the first string: TOSS
Enter the second string: SHOT
TOSS and SHOT are not anagrams

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the first string: ");
        String str1 = sc.next();
        System.out.print("Enter the second string: ");
        String str2 = sc.next();
        int len1 = str1.length();
        int len2 = str2.length();
        int count = 0;
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        if(len1 == len2){
            Arrays.sort(s1);
            Arrays.sort(s2);
            for(int i=0;i<len1;i++) {
            if(s1[i] == s2[i]) {
                count++;
            }
            else {
                System.out.print(""+(str1)+" and "+(str2)+" are not anagrams");
                break;
            }
         }
        if(count!=0) {
            System.out.print(""+(str1)+" and "+(str2)+" are anagrams");
        }
    }
        else {
                System.out.print(""+(str1)+" and "+(str2)+" are not anagrams");
        }
    }
}

89th Problem
Write a Java program that finds the number of vowels and consonants in a given sentence
Enter a sentence: welcome to ngit college
Number of vowels: 8
Number of consonants: 12
Sample output1:
Enter a sentence: Good Morning
Number of vowels: 4
Number of consonants: 7

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a sentence: ");
        String str = sc.nextLine();
        int v = 0;
        int c = 0;
        for(int i=0;i<str.length();i++) {
            char ch = str.charAt(i);
            if(ch =='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u') {
                v++;
            }
            else if(ch!=' ') {
                c++;
            }
        }
        System.out.println("Number of vowels: "+v);
        System.out.print("Number of consonants: "+c);
    }
}

90th Problem
Java program that reverses a given word without using the split
Enter a word: how are you
Reversed word: you are how

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a word: ");
        String str = sc.nextLine();
        String arr [] = str.split(" ");
        System.out.print("Reversed word: ");
        for(int i=arr.length-1;i>=0;i--) {
            System.out.print(arr[i]+" ");
        }
    }
}

91st Problem
Java program that reverses a given word without using the split
Enter a word: hello
Reversed word: olleh

import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a word: ");
        String str = sc.nextLine();
        System.out.print("Reversed word: ");
        for(int i=str.length()-1;i>=0;i--) {
            System.out.print(str.charAt(i));
        }
    }
}

92nd Problem
Write a Java program that swaps two elements in an array list
sample output
Enter the number of elements in the ArrayList: 3
Enter 3 elements:
1
2
3
Enter the index of the first element to swap (0-based): 1
Enter the index of the second element to swap (0-based): 2
Updated ArrayList:
1 3 2

import java.util.ArrayList;
import java.util.Scanner;
public class SwapArrayListElements {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements in the ArrayList: ");
        int n = scanner.nextInt();
        ArrayList<Integer> arrayList = new ArrayList<>(n);
        System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            arrayList.add(scanner.nextInt());
        }
        System.out.print("Enter the index of the first element to swap (0-based): ");
        int firstIndex = scanner.nextInt();
        System.out.print("Enter the index of the second element to swap (0-based): ");
        int secondIndex = scanner.nextInt();
        int temp = arrayList.get(firstIndex);
        arrayList.set(firstIndex, arrayList.get(secondIndex));
        arrayList.set(secondIndex, temp);
        System.out.println("Updated ArrayList:");
        for (int i = 0; i < n; i++) {
            System.out.print(arrayList.get(i) + " ");
        }
    }
}

93rd Problem
Write a java program to read an arraylist of numbers and insert an element 
At the given position
Enter the number of elements in the ArrayList: 5
Enter 5 elements:
10
20
50
70
90
Enter the element to be inserted: 23
Enter the position (0-based) where the element should be 
inserted: 1
Updated ArrayList:
10 23 20 50 70 90 

import java.util.ArrayList;
import java.util.Scanner;
public class InsertArrayListElement {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Integer> arrayList = new ArrayList<>();
        System.out.print("Enter the number of elements in the ArrayList: ");
        int n = scanner.nextInt();
        System.out.print("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            arrayList.add(scanner.nextInt());
        }
        System.out.print("Enter the element to be inserted: ");
        int ele = scanner.nextInt();
        System.out.print("Enter the position (0-based) where the element should be inserted: ");
        int ind = scanner.nextInt();
        arrayList.add(ind, ele);
        System.out.print("Updated ArrayList: ");
        for (int i = 0; i < arrayList.size(); i++) {
            System.out.print(arrayList.get(i) + " ");
        }
    }
}

94th Problem
Write a Java program to update an array element by the given element.
Enter the size of the array: 5
Enter 5 elements:
12
13
45
67
89
Enter the index of the element to be updated (0-based): 3
Enter the new element value: 890
Updated Array: [12, 13, 45, 890, 89]

import java.util.Scanner;
public class UpdateArrayElement {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the size of the array: ");
        int n = scanner.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        System.out.print("Enter the index of the element to be updated (0-based): ");
        int index = scanner.nextInt();
        System.out.print("Enter the new element value: ");
        int newElement = scanner.nextInt();
        arr[index] = newElement;
        System.out.println("Updated Array: " + Arrays.toString(arr));
    }
}

95th Problem
Write a Java program to extract a portion of an array list.
sample output
Enter the number of elements in the ArrayList: 6
Enter 6 elements:
12
34
56
78
99
76
Enter the starting index of the portion (0-based): 2
Enter the ending index of the portion (0-based): 5
Extracted Portion: [56, 78, 99, 76]

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
public class ExtractArrayListPortion {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements in the ArrayList: ");
        int n = scanner.nextInt();
        ArrayList<Integer> arrayList = new ArrayList<>();
        System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            arrayList.add(scanner.nextInt());
        }
        System.out.print("Enter the starting index of the portion (0-based): ");
        int startIndex = scanner.nextInt();
        System.out.print("Enter the ending index of the portion (0-based): ");
        int endIndex = scanner.nextInt();
        List<Integer> extractedPortion = arrayList.subList(startIndex, endIndex + 1);
        System.out.println("Extracted Portion: " + extractedPortion);
    }
}

96th Problem
Write a Java program to iterate through all elements in a linked list starting 
at the specified position.
sample output:
Enter the number of elements in the linked list: 4
Enter 4 elements:
23 90 87 675
Enter the starting position (0-based): 1
Elements in the linked list starting from position 1:
90
87
675 

import java.util.LinkedList;
import java.util.Scanner;
public class IterateLinkedListFromPosition {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements in the linked list: ");
        int n = scanner.nextInt();
        LinkedList<Integer> linkedList = new LinkedList<>();
        System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            linkedList.add(scanner.nextInt());
        }
        System.out.print("Enter the starting position (0-based): ");
        int startIndex = scanner.nextInt();
        System.out.println("Elements in the linked list starting from position " + startIndex + ":");
        for (int i = startIndex; i < linkedList.size(); i++) {
            System.out.println(linkedList.get(i));
        }
    }
}

97th Problem
Write a Java program to insert the specified element at the specified position in the linked list.
Enter the number of elements in the linked list: 6
Enter 6 elements:
100
200
300
560
345
123
Enter the element to be inserted: 567
Enter the position (0-based) where the element should be inserted: 1
Updated Linked List: [100, 567, 200, 300, 560, 345, 123]

import java.util.LinkedList;
import java.util.Scanner;
public class InsertLinkedListElement {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements in the linked list: ");
        int n = scanner.nextInt();
        LinkedList<Integer> linkedList = new LinkedList<>();
        System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            linkedList.add(scanner.nextInt());
        }
        System.out.print("Enter the element to be inserted: ");
        int ele = scanner.nextInt();
        System.out.print("Enter the position (0-based) where the element should be inserted: ");
        int ind = scanner.nextInt();
        linkedList.add(ind, ele);
        System.out.println("Updated Linked List: " + linkedList);
    }
}

98th Problem
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Sample 1:
Input:()[]{}
Output: true
Sample 2:
Input:([)]
Output: false
Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

import java.util.Stack;
public class ValidParentheses {
    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else if (c == ')' && !stack.isEmpty() && stack.peek() == '(') {
                stack.pop();
            } else if (c == '}' && !stack.isEmpty() && stack.peek() == '{') {
                stack.pop();
            } else if (c == ']' && !stack.isEmpty() && stack.peek() == '[') {
                stack.pop();
            } else {
                return false;
            }
        }
        return stack.isEmpty();
    }
    public static void main(String[] args){
        String input1 = "()[]{}";
        String input2 = "([)]";
        System.out.println("Sample 1: " + isValid(input1));
        System.out.println("Sample 2: " + isValid(input2));
    }
}

99th Problem
Imagine you have a basket of apples, each apple representing a number stored in an array called "nums." We want to create another basket called "runningSum" to keep track of the cumulative total of apples as we pick them one by one from the original basket.
To clarify, the runningSum at a specific position 'i' is like counting the total number of apples you have picked from the original basket up to that point, including the apple at position 'i.'
Your task is to determine the number of apples in the runningSum basket at each position 'i' and return the runningSum basket as the final result.
Input Format:
-------------------
Line-1: A number, size of the array
Line-2: N line separated integers, number of apples
Output Format:
-------------------
Line-1: Space separated two numbers, indices


Sample Input:
--------------
4
1 2 3 4

Sample Output:
---------------
1 3 6 10


Sample Input:
--------------
5
1 1 1 1 1

Sample Output:
--------------
1 2 3 4 5

import java.util.*;
public class Main{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int[] nums = new int[size];
        for(int i=0;i<size;i++){
            nums[i] = sc.nextInt();
        }
        int[] runningsum = new int[size];
        int sum = 0;
        for(int i=0;i<size;i++){
            sum +=nums[i];
            runningsum[i] = sum;
        }
        for(int i=0;i<size;i++){
            System.out.print(runningsum[i] + " ");
        }
    }
}

100th Problem
In a bag filled with an assortment of coins, each marked with a unique integer value, you are tasked with finding two distinct coins. 
The sum of the values on these two coins should equal a specified target value. 

Your goal is to determine the indices (positions) of these two coins within the bag. 

It is guaranteed that there is exactly one solution to this problem, and each coin can only be used once. 

Input Format:
-------------------
Line-1: A number, size of the array
Line-2: N line separated integers, coins[]
Line-3: A number, target sum

Output Format:
-------------------
Line-1: Space separated two numbers, indices

Sample Input:
--------------
4
2 7 11 15
9

Sample Output:
---------------
0 1


Sample Input:
--------------
3
3 2 4
6

Sample Output:
--------------
1 2

import java.util.*;
public class Solution {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        int sum = sc.nextInt();
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i] + arr[j] ==sum){
                    System.out.print(i+" "+j);
                    System.exit(0);
                }
            }
        }
    }
  }

101st Problem
A English teacher, would like to present a language challenge. Imagine you have a sentence written with words and spaces. Your task is to determine the length of the final word in this sentence. A word, in this context, is defined as a group of characters without any spaces in between. Your goal is to find the length of the very last word in this sentence.
Input Format:-------------
Line-1: A string, represents a sentenceOutput Format:-------------
-Line-2: An integer result, represents the lenght of last wordSample 
Input:--------------"Hello World"
Sample Output:---------------5
Sample Input:--------------"fly me   to   the moon  "
Sample Output:---------------4

import java.util.*;
public class Solution{
    public static int lengthoflast(String sentence){
        sentence = sentence.trim();
        String[] words = sentence.split("\\s+");
        String lastword = words[words.length-1];
        return lastword.length();
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        String sentence = sc.nextLine();
        int result = lengthoflast(sentence);
        System.out.println(result);
    }
}

102nd Problem
Christina has given a task to break his friends code 
he will given all lower case alphabets  and code as the input 
Christina has to figure the text from the code and display the text 
Input - The first line of input consists of lower case alphabets and code 
The first alphabet letter will given 01, second alphabet will be given 02, and so on 
Output - Break the code and display the string 
Sample Test Case - 1 
input =
abcdefghijklmnopqrstuvwxyz
110525
Explantion - 
From the above test case we have 'a' has '01', 'b' has '02', and finally 'z' has '26' 
where each alphabet will be assigned a two digit number 
and for the code 110525 the characters will be 11 as 'k', 05 as 'e' and 25 as 'y' 
so the output is "key" 
Sample Test Case - 2
input =
qpwoeirutyalskdjfhgzmxncbv
131013090521
output = system
Explantion - From the above test case we have 'q' as '01' , 'p' as '02' and finally 'v' as '26'
and for the code 131013090521 we have the following code 
13-s
10-y
13-s
09-t
05-e
21-m
so the output is system

import java.util.*;
public class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        String word = sc.next();
        String code = sc.next();
        StringBuilder sb = new StringBuilder();
        char str[] = word.toCharArray();
        HashMap<Integer,Character> hm = new HashMap<>();
        for(int i=0;i<str.length;i++){
            hm.put(i+1,str[i]);
        }
        int arr[] = new int[code.length()/2];
        for(int i=0;i<arr.length;i++){
            arr[i] = Integer.parseInt(code.substring(2*i,2*i+2));
        }
        for(int key:arr){
            if(hm.containsKey(key)){
                sb.append(hm.get(key));
            }
        }
        System.out.println(sb);
    }
}

103rd Problem
Sony, a student has given a date by his teacher. 
The teacher taught him the Dates and Calenders in the class today. 
The teacher wants to test the Sony whether he understood or not.
She gives a date to sony and ask to print the following date. 
Help Sony to print the next date. 
Note - If the Date is invalid, Sony has to print -1 
Dont Use Any Pre Defined Date and Time API 
Input - The Input contains the following format "DD-MM-YYYY"
Output - Print the output int the following format "DD-MM-YYYY"
input = 30-11-2000
output = 01-12-2000
input = 31-09-2000
output = -1 
There will be only 30 days in the September month. So prints -1 

import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        String str[]=s.split("-");
        int day=Integer.parseInt(str[0]);
        int month=Integer.parseInt(str[1]);
        int year=Integer.parseInt(str[2]);
        if(day<0 || day>31 || month<0 || month>12 || year<0)
        {
            System.out.println("-1");
            System.exit(0);
        }
        else
        {
            if(month==2)//feb month
            {
                if(year%4==0)//leap year
                {
                    if(day==29)//29 days
                    {
                        day=1;
                        month=3;
                    }
                    else if(day>29)
                    {
                        System.out.println("-1");
                        System.exit(0);
                    }
                    else//not 29 days
                    {
                        day=day+1;
                    }
                }
                else//not a leap year
                {
                    if(day==28)//28 days
                    {
                        day=1;
                        month=3;
                    }
                    else if(day>28)
                    {
                        System.out.println("-1");
                        System.exit(0);
                    }
                    else//not 28 days
                    {
                        day=day+1;
                    }
                }
            }
            else if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)//31 days
            {
                if(day==31)//31 day
                {
                    if(month==12)//last day of the year
                    {
                        day=1;
                        month=1;
                        year=year+1;
                    }
                    else//other months
                    {
                        day=1;
                        month=month+1;
                    }
                }
                else//not a 31 day
                {
                    day=day+1;
                }
            }
            else
            {
                if(day==30)//30 days
                {
                    day=1;
                    month=month+1;
                }
                else if(day>30)
                {
                    System.out.println("-1");
                    System.exit(0);
                }
                else
                {
                    day=day+1;
                }
            }
            System.out.printf("%02d-%02d-%04d",day,month,year);
        }
    }
}



Ramu is playing a game on a 2D Plane, 
he has given n points with co-ordinates p[i]=(x,y);

He has to visit all the points in the order given by points in minimum time. 

His moves can be as follows.

In 1 second, he can go  vertically by 1 unit,go horizontally by 1 unit, or
go diagonally sqrt(2) units (in other words, go one 1 unit vertically then 1 unit horizontally in 1 second).

he has to visit the points in the same given order as they appear in the given list.
He is also allowed to pass through points that appear later in the order, but these do not count as visits.

Input - The First line of input consists of the Number of Points(n) followed by n points

Sample Test Case - 1
Input = 3
1 1
3 4
-1 0
output = 7

Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   
Time from [1,1] to [3,4] = 3 seconds 
Time from [3,4] to [-1,0] = 4 seconds
Total time = 7 seconds


Sample Test Case - 2
Input = 2
3 2
-2 2
output = 5



import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[][]=new int[n][2];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<2;j++)
            {
                arr[i][j]=sc.nextInt();
            }
        }
        int x=0,y=0,sum=0,count=0;
        for(int i=0;i<n-1;i++)
        {
            x=arr[i][0]-arr[i+1][0];
            y=arr[i][1]-arr[i+1][1];
            if(x==0 || y==0)
            {
                sum=x+y;
                sum=Math.abs(sum);
            }
            else
            {
                sum=x+y;
                sum=(sum/2)+(sum%2);
                sum=Math.abs(sum);
            }
            count=count+sum;
        }
        System.out.println(count);
    }
}



Suman is given two words first word and second word 
he is playing a game to create second word from first word. 

He has to follow the below rules 
        - Replace all the occurrences of a character in first word with any other letter.
	- Repeat the above rule to create secondword from firstword.
	
	NO two characters in first world should map to same character 
	 Assume both words have same length.

If he is able to do, print "hurray" else print "oh no" 

input = 
paper 
title
output = hurray

Explanation:
----------------
'p' is replaced with 't', 'a' is with 'i', 'e' is with 'l', and 'r' with 'e'.


input = 
memo 
demo
output = ohno



import java.util.*;
class test
{
    public static String check(String s1,String s2)
    {
        if(s1.length()!=s2.length())
        {
            return "ohno";
        }
        else
        {
            HashMap<Character,Character> hm=new HashMap<>();
            for(int i=0;i<s1.length();i++)
            {
                char c1=s1.charAt(i);
                char c2=s2.charAt(i);
                if(hm.containsKey(c1))
                {
                    if(hm.get(c1)!=c2)
                    {
                        return "ohno";
                    }
                }
                else
                {
                    hm.put(c1,c2);
                }
            }
            return "hurray";
        }
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s1=sc.next();
        String s2=sc.next();
        System.out.println(check(s1,s2));
    }
}



Open AI is working on the below task. 
The task is as follows 
++i
i++
--i
i--

By Default i value is given as '0'

The Open AI has to design the code to give the result for this operations  
 

Example 1:

Input = --i i++ i++ i++
Output = 1
Explanation: The operations are performed as follows:
Initially, i = 0.
--i: i is decremented by 1, i =  0 - 1 = -1.
i++: i is incremented by 1, i = -1 + 1 =  0.
i++: i is incremented by 1, i =  0 + 1 =  1.
i++: i is incremented by 1, i =  1 + 1 =  2.


import java.util.*;
class test
{
    public static int sum(String s)
    {
        String str[]=s.split(" ");
        int i=0;
        for(int j=0;j<str.length;j++)
        {
            if(str[j].charAt(1)=='+')
            {
                i=i+1;
            }
            else
            {
                i=i-1;
            }
        }
        return i;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        System.out.println(sum(s));
    }
}



Dolu has given a Mobile.
His mobile has a special keypad with all alphabets in a same row. 
Initially, Dolus finger is at index 0. 
To type a character, he has to move his finger to the index of the desired character. 
The time taken to move his finger from index i to index j is |i - j|.

Your task is to calculate the time taken for typing the characters on the keypad

The First line of input contains the alphabets(a-z) arranged in random order followed by the word to be typed.

Input = abcdefghijklmnopqrstuvwxyz
cba
Output = 4
Explanation: The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'.
Total time = 2 + 1 + 1 = 4. 

input = pqrstuvwxyzabcdefghijklmno 
word = spt
output = 10


import java.util.*;
class test
{
    public static int tsum(String s,String str)
    {
        String word[]=str.split("");
        int sum=0;
        int initial=0;
        for(String a:word)
        {
            int len=s.indexOf(a);
            sum=sum+Math.abs(initial-len);
            initial=len;
        }
        return sum;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        String str=sc.next();
        System.out.println(tsum(s,str));
    }
}



Shyam a third class student is a given and date
His teacher asked him to find out the day of the date in the given year.
Help Shyam to solve this problem 

The Input Date Contains DD MM YYYY Format
Assume the Input Date is valid date


input = 31 12 2010
output = 365

input = 01 02 1995
output = 32

1st Feb is 32 Day in the year.

Note - Dont Use Pre Defined Date and Time Class



import java.util.*;
class test
{
    public static int count(int day,int month,int year)
    {
        int days=0;
        int months[]={0,31,28,31,30,31,30,31,31,30,31,30,31};
        if(year%4==0)
        {
            if(year%100==0)
            {
                if(year%400==0)
                {
                    months[2]=29;
                }
                else
                {
                    months[2]=28;
                }
            }
            else
            {
                months[2]=29;
            }
        }
        for(int i=1;i<=month;i++)
        {
            days=days+months[i-1];
        }
        return days+day;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int day=sc.nextInt();
        int month=sc.nextInt();
        int year=sc.nextInt();
        System.out.println(count(day,month,year));
    }
}



You are given two strings s1 and s2 of equal length. 
A string swap is an operation where you choose two indices in a string(not necessarily different) and 
swap the characters at these indices.

Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. 
Otherwise, return false.

 

Sample Input1:
-------------
bank
kanb
Sample Output1: 
--------------
true

Explanation: For example, swap the first character with the last character of s2 to make "bank".

Sample Input2:
-------------
hyderabad
secunderabad

Sample Output2: 
--------------
false

Explanation: It is impossible to make them equal with one string swap.

Sample Input3:
-------------
kmit
kmit

Sample Output3: 
--------------
true

Explanation: The two strings are already equal, so no string swap operation is required.



import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s1=sc.nextLine();
        String s2=sc.nextLine();
        String str1[]=s1.split("");
        String str2[]=s2.split("");
        Arrays.sort(str1);
        Arrays.sort(str2);
        int count=0;
        if(str1.length==str2.length)
        {
            for(int i=0;i<str1.length;i++)
            {
                if(str1[i].equals(str2[i]))
                {
                    count=count+1;;
                }
            }
            if(count==str1.length)
            {
                System.out.println("true");    
            }
            else
            {
                System.out.println("false");
            }
        }
        else
        {
            System.out.println("false");
        }
    }
}


Arjun is playing a word game in his tab. When he start the game , It displays a
word and he has to check for any two adjacent characters which are same.If found 
he has to select those two characters by tapping, so that both characters will
be deleted from the word and the word size shrinks by 2. This process to be 
repeated until the word has no two adjacent characters are same.
You task is to help Arjun to perform the above task and Return the final word
obtained.

Input Format:
-------------
Line-1: A string represents the word.

Output Format:
--------------
Return a string or empty string.

Constraints:
------------   
    1 <= word.length <= 10^5   
    word consists only lower case letters.

Sample Input-1:
---------------
pqqprs

Sample Output-1:
----------------
rs

Explanation:
-------------
Initially , Delete two 'q's then the word will be 'pprs'. Now Delete two 'p's 
then the word will be rs.

Sample Input-2:
---------------
pqqqprrs

Sample Output-2:
----------------
pqps

Explanation:
-------------
Initially , Delete two 'q's then the word will be 'pqprrs'. Now Delete two 'r's
then the word will be pqps.


import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine().toLowerCase();
        Stack<Character> st=new Stack<>();
        for(int i=0;i<s.length();i++)
        {
            char a=s.charAt(i);
            if(st.isEmpty())
            {
                st.push(a);
            }
            else if(st.peek()!=a)
            {
                st.push(a);
            }
            else
            {
                st.pop();
            }
        }
        for(int i=0;i<st.size();i++)
        {
            System.out.print(st.get(i));
        }
    }
}



Mr Somanath is a math teacher. He is given a problem to his students.
The students are given a number N, and the student has to perform following step:
   - Add each digit of the number and add the result to N
Repeat this procedure until N becomes a single digit number.

Your task is to help the students to perform the above steps and 
print the resultant single digit number N.

Input Format:
-------------
An integer, number N.

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
95

Sample Output-1:
----------------
5

Explanation: 
------------
95 => 9 + 5 = 14
14 => 1 + 4 = 5
Answer is 5


Sample Input-2:
---------------
765

Sample Output-2:
----------------
9


import java.util.*;
class test
{
    static int rsum(int n)
    {
        int sum=0;
        if(n<10)
        {
            return n;
        }
        while(n>0)
        {
            int temp=n%10;
            sum=sum+temp;
            n=n/10;
        }
        return rsum(sum);
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(rsum(n));
    }
}



You are given two strings word1 and word2. Merge the strings by
adding letters in alternating order, starting with word1. 
If a string is longer than the other, append the additional letters onto the 
end of the merged string.

Return the merged string.



Input: word1 = "abc", word2 = "pqr"
Output: "apbqcr"
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r


Input: word1 = "ab", word2 = "pqrs"
Output: "apbqrs"
Explanation: Notice that as word2 is longer, "rs" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s
Example 3:

Input: word1 = "abcd", word2 = "pq"
Output: "apbqcd"
Explanation: Notice that as word1 is longer, "cd" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d



import java.util.*;
class test
{
    public static StringBuilder merge(String s1,String s2)
    {
        StringBuilder sb=new StringBuilder();
        int len=Math.min(s1.length(),s2.length());
        for(int i=0;i<len;i++)
        {
            sb.append(s1.charAt(i));
            sb.append(s2.charAt(i));
        }
        if(s1.length()>s2.length())
        {
            for(int i=len;i<s1.length();i++)
            {
                sb.append(s1.charAt(i));
            }
        }
        else
        {
            for(int i=len;i<s2.length();i++)
            {
                sb.append(s2.charAt(i));
            }
        }
        return sb;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s1=sc.next();
        String s2=sc.next();
        System.out.println(merge(s1,s2));
    }
}


Given a string num which represents an integer, return true if num is a strobogrammatic number.
strobogrammatic number is a number that looks the same when rotated 180 degrees 
(looked at upside down).


Input: num = "69"
Output: true
Example 2:

Input: num = "88"
Output: true
Example 3:

Input: num = "962"
Output: false
 



import java.util.*;
class test
{
    public static boolean num(String s)
    {
        ArrayList<Integer> arr=new ArrayList<>();
        arr.add(0);
        arr.add(1);
        arr.add(6);
        arr.add(8);
        arr.add(9);
        StringBuilder sb=new StringBuilder();
        for(int i=s.length()-1;i>=0;i--)
        {
            char c=s.charAt(i);
            if(c=='0' || c=='1' || c=='8')
            {
                sb.append(c);
            }
            else if(c=='6')
            {
                sb.append('9');
            }
            else if(c=='9')
            {
                sb.append('6');
            }
            else
            {
                return false;
            }
        }
        if(s.equals(sb.toString()))
        {
            return true;
        }
        return false;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        System.out.println(num(s));
    }
}



case =1
input =3
3 2 3
output =3

case =2
input =7
2 2 1 1 1 2 2
output =2

case =3
input =11
2 2 1 1 1 2 2 2 2 2 2
output =2

case =3
input =11
3 3 3 3 3 3 2 2 2 2 2 
output =3

case =4
input =3
7 7 7
output =7




import java.util.*;
class test
{
    public static int max(int n,HashMap<Integer,Integer> hm)
    {
        int max=0;
        for(Map.Entry<Integer,Integer> me:hm.entrySet())
        {
            if(me.getKey()>max)
            {
                max=me.getKey();
            }
        }
        return max;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<n;i++)
        {
            int a=sc.nextInt();
            if(!hm.containsKey(a))
            {
                hm.put(a,1);
            }
            else
            {
                int b=hm.get(a);
                hm.put(a,b+1);
            }
        }
        System.out.println(max(n,hm));
    }
}



Given line, print the string in reverse(use recursion)
Note: don't use reverse() method in stringbuilder)

ex:
input =keshav memorial
output =lairomem vahsek


import java.util.*;
class test
{
    static String rev(String s)
    {
        if(s.isEmpty())
        {
            return s;
        }
        else
        {
            return rev(s.substring(1))+s.charAt(0);
        }
        
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        System.out.println(rev(s));
    }
}



You are a teacher managing an examination with a set of student IDs 
attending within a specific range [start, end]. 
The list of attending students is sorted and contains unique IDs within this range.

A student ID is considered absent if it falls within the range [start, end] 
but is not present in the attendance list.

Your task is to generate the most concise and organized list of ranges 
that accurately identifies all the absent student IDs. 
These ranges should cover every missing ID within the given range 
and should not include any of the present student IDs in the ranges.

Input Format:
-------------
Line 1: start range
Line 2: end range
Line 3: Space separated id's

Output Format:
-------------
Ranges of missing id's, refer sample output

Sample Input1:
--------------
0
99
0 1 3 50 75

Sample Output1:
--------------
[2,2]
[4,49]
[51,74]
[76,99]

Sample Input2:
--------------
-1
-1
-1

Sample Output1:
--------------
-1

Explanation: There are no missing ranges since there are no missing numbers.

NOTE: Print -1 for boundary conditions




import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int start=sc.nextInt();
        int end=sc.nextInt();
        sc.nextLine();
        String s=sc.nextLine();
        String str[]=s.split(" ");
        int arr[]=new int[str.length];
        for(int i=0;i<arr.length;i++)
        {
            arr[i]=Integer.parseInt(str[i]);
        }
        int res[]=new int[2];
        if(arr.length==1 || arr[0]==-1)
        {
            System.out.println("-1");
        }
        else
        {
            for(int i=0;i<arr.length;i++)
            {
                if(i==0 && arr[0]>start)
                {
                    res[0]=start;
                    res[1]=arr[i]-1;
                    System.out.println(Arrays.toString(res));
                }
                else if(i>0 && arr[i]-arr[i-1]>1)
                {
                    res[0]=arr[i-1]+1;
                    res[1]=arr[i]-1;
                    System.out.println(Arrays.toString(res));
                }
            }
            if(arr[arr.length-1]<end)
            {
                res[0]=arr[arr.length-1]+1;
                res[1]=end;
                System.out.println(Arrays.toString(res));
            }
            if(arr.length-1==end-start)
            {
                System.out.println("-1");
            }
        }
    }
}



Given an integer num, return the number of steps to reduce it to zero.

In one step, if the current number is even, you have to divide it by 2, 
otherwise, you have to subtract 1 from it.

Input Format:
-------------
Line 1: A number

Output Format:
--------------
Line 1: A number

Sample Input 1:
---------------
14

Sample Output 1:
----------------
6

Explanation: 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.
Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.


Sample Input 2:
---------------
8

Sample Output 2: 
----------------
4

Explanation: 
Step 1) 8 is even; divide by 2 and obtain 4. 
Step 2) 4 is even; divide by 2 and obtain 2. 
Step 3) 2 is even; divide by 2 and obtain 1. 
Step 4) 1 is odd; subtract 1 and obtain 0.



import java.util.*;
class test
{
    public static int count(int n)
    {
        // int count=0;
        // while(n!=0)
        // {
        //     if(n%2==0)
        //     {
        //         n=n/2;
        //     }
        //     else
        //     {
        //         n=n-1;
        //     }
        //     count++;
        // }
        // return count;
        if(n==0)
        {
            return 0;
        }
        else if(n%2==0)
        {
            return 1+count(n/2);
        }
        else
        {
            return 1+count(n-1);
        }
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(count(n));
    }
}


There is a switch-board made by an electrician,
If you turn on any two adjacent switches, it will cause short-circuit
and damage the switch-board.

You are given N integers(only 0's and 1's), Indiactes current status of the switch board with N switches,
where 1 indiactes switch is ON and 0 indiactes switch is OFF. 
And an integer K, more number of switches to be turned ON.

Return true if and only if you can turn ON all the K switches, without causing any damage to switch-board.
Otherwise return fasle.

Input Format:
-------------
Line-1: Two integers N and K, number of switches, and more number of switches to be ON
Line-2: N space separated integers, only 0's and 1's.

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
5 1
1 0 0 0 1

Sample Output-1:
----------------
true

Sample Input-2:
---------------
5 2	
1 0 0 0 1

Sample Output-2:
----------------
false



import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        int count=0;
        for(int i=1;i<n-1;i++)
        {
            if(arr[i-1]==0 && arr[i]==0 && arr[i+1]==0)
            {
                arr[i]=1;
                count++;
            }
        }
        if(count>=a)
        {
            System.out.println("true");
        }
        else
        {
            System.out.println("false");
        }
    }
}


write a program to check, the given string is palindrome or not
Note: write the logic using recrusion only

ex:
input =liril
output =true

input =lirrli
output =false

import java.util.*;
class test
{
    public static boolean palindrome(String s)
    {
        StringBuilder sb=new StringBuilder(s);
        if(s.length()==1 || s.length()==0)
        {
            return true;
        }
        if(s.charAt(0)==s.charAt(s.length()-1))
        {
            return palindrome(s.substring(1,s.length()-1));
        }
        return false;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        System.out.println(palindrome(s));
    }
}



Write an algorithm to determine if a number n is magic number or not

A Magic number is a number defined by the following process:

1) Starting with any positive integer, replace the number by the sum of the squares of 
its digits.
2) Repeat the process until the number equals 1 (where it will stay), or 
it loops endlessly in a cycle which does not include 1.
3) Those numbers for which this process ends in 1 are magic number.
Return true if n is a Magic number, and false if not.


Input: n = 19
Output: true

12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1


Input: n = 2
Output: false


import java.util.*;
class test
{
    public static boolean magic(int n)
    {
        int sum=0;
        if(n==1 || n==7)
        {
            return true;
        }
        else if(n<10)
        {
            return false;
        }
        else
        {
            while(n!=0)
            {
                int temp=n%10;
                sum=sum+(temp*temp);
                n=n/10;
            }
            return magic(sum);
        }
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(magic(n));
    }
}


You are provided with a string composed of binary digits, and 
your task is to write a method that calculates the count of set bits within it. 

Input Format:
-------------------
A string, consists of 0's and 1's.

Output Format:
-------------------
Print an integer result.


Sample Input:
--------------
01001100001111101101010101111000

Sample Output:
---------------
17


Sample Input:
--------------
11110010111011011011011111100110

Sample Output:
--------------
22





import java.util.*;
class test
{
    public static int count(String s)
    {
        int c=0;
        if(s.length()==0)
        {
            return 0;
        }
        if(s.charAt(0)=='1')
        {
            c++;
        }
        return c+count(s.substring(1));
        
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        System.out.println(count(s));
    }
}



Keshav Memorial University has the following grading policy:

Every student receives a  in the inclusive range from  0 to 100.
Any grade less than 40 is a failing grade.
Sam is a professor at the university and likes to round each student's grade according to these rules:

If the difference between the grade and the next multiple of  5 is less than 3, round grade up to the next multiple of 5.
If the value of grade is less than 38, no rounding occurs as the result will still be a failing grade.

Examples
grade = 84 round to 85 (85 - 84 is less than 3)
grade = 29 do not round (result is less than 40)
grade = 57 do not round (60 - 57 is 3 or higher)

Given the initial value of  for each of Sam's  students, write code to automate the rounding process.

Input Format:
-------------
Line 1: The number of students.
Line 2: Each line  of the  subsequent lines contains a single integer, grades[i].

Sample Input:
-------------
4
73
67
38
33

Sample Output:
--------------
75
67
40
33


import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        for(int i=0;i<n;i++)
        {
            if(arr[i]>=38)
            {
                if((arr[i]+1)%5==0)
                {
                    arr[i]=arr[i]+1;
                }
                else if((arr[i]+2)%5==0)
                {
                    arr[i]=arr[i]+2;
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            System.out.println(arr[i]);
        }
    }
}



A space explorer's ship crashed on Mars! They send a series of SOS messages to Earth for help.

Letters in some of the SOS messages are altered by cosmic radiation during transmission. 
Given the signal received by Earth as a string, S , determine how many letters of the SOS message have been changed by radiation.

Example
S = SOSTOT
The original message was SOSSOS. Two of the message's characters were changed in transit.

Input Format:
-------------
Line 1: A single string, S.

Output Format:
-------------
Line 1: An integer.

Sample Input 1:
---------------
SOSSPSSQSSOR

Sample Output 1:
---------------
3

Explanation:
------------
S = SOSSPSSQSSOR, and signal length is 12. They sent 4 SOS messages (i.e.:12/3 = 4).

Expected signal: SOSSOSSOSSOS
Recieved signal: SOSSPSSQSSOR
Difference:          X  X   X

Sample Input 2:
---------------
SOSSOT

Sample Output 2:
----------------
1


Sample Input 3:
---------------
SOSSOSSOS

Sample Output 3:
---------------
0

Explanation:
-------------
Since no character is altered, return 0.



import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine().toUpperCase();
        int len=s.length()/3;
        int count=0;
        String a="SOS".repeat(len);
        for(int i=0;i<s.length();i++)
        {
            if(s.charAt(i)!=a.charAt(i))
            {
                count++;
            }
        }
        System.out.println(count);
    }
}


In a shopping mall, there is a Lift with a capacity of 500kgs only.
There are N persons waiting for the lift, and their weights (weights[]) are given.
If The Lift is overloaded, it will not move.
 
Your task is to find out the maximum number of persons can use the Lift,
without any overloading issue.

Input Format:
-------------
Line-1: An integer N, number of persons
Line-2: N space separated integers, weights of the persons.

Output Format:
--------------
Print an integer, max num of persons canuse the lift.

Sample Input-1:
---------------
6
98 121 76 135 142 65

Sample Output-1:
----------------
5

Sample Input-2:
---------------
7
85 67 69 83 54 61 50

Sample Output-2:
----------------
7



import java.util.*;
class test
{
    public static int max(int arr[],int n)
    {
        Arrays.sort(arr);
        int sum=0;
        int c=0;
        for(int i=0;i<n;i++)
        {
            if(sum+arr[i]<500)
            {
                sum=sum+arr[i];
                c++;
            }
        }
        return c;
    }
    public static void main (String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        System.out.println(max(arr,n));
    }
}



MotorSport Ltd hosting a Racing Championship. Mr. Ajith is participating 
in car races. Each race start and end in perticular time intervals.

You are given an array of racing time intervals consisting of
start and end times [[s1,e1],[s2,e2],...] (s < e ) of N races, in which 
Ajith has to participate. Your task is to determine whether Ajith can 
in all the races or not.

NOTE: If a race starts at time 'a' ends at time 'b', 
another race can start at 'b'.

Input Format:
-------------
Line-1: An integer N, number of races Ajith has to participate.
Next N lines: Two space separated integers, start and end time of each race.

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
3
0 30
5 10
15 20

Sample Output-1:
----------------
false

Sample Input-2:
---------------
3
0 10
15 25
30 35

Sample Output-2:
----------------
true



import java.util.*;
class test
{
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[][]=new int[n][2];
        for(int i=0;i<n;i++)
        {
            arr[i][0]=sc.nextInt();
            arr[i][1]=sc.nextInt();
        }
        Arrays.sort(arr,(a,b)->a[1]-b[1]);
        boolean win=true;
        int end=arr[0][1];
        for(int i=1;i<n;i++)
        {
            if(arr[i][0]<end)
            {
                win=false;
                break;
            }
            else
            {
                end=arr[i][1];
            }
        } 
        System.out.println(win);
    }
}



You are reading an array called "numbers" with values.

Find the first duplicate value in "numbers" and 
print out the INDEX of that value as well as the INDEX of where it was first found in "numbers".

If no duplicate value found print -1.

Input Format:
-------------
Line 1: Size of array
Line 2-n : N line-separated numbers.

Output Format:
--------------
Line 1 : one space-separated numbers.

Sample Input 1:
---------------
9
10 20 15 30 15 20 35 60 10

Sample Output 1:
----------------
4 2

Explanation:
------------
4 is where the duplicate index was and 2 is where the first pair of that duplicate was, as an index.

Sample Input 2:
---------------
5
1 2 3 4 5

Sample Output 2:
----------------
-1



Mark is a class 9 student. His class teacher Betty, gives him a match box 
containing match sticks of variable lengths. Betty asks Mark to form an object 
in the form of a triangle and return the maximum perimeter that can be formed 
from those match sticks. If he cannot form the given object, he has to 
communicate back to Betty by sending a value 0.

Sample test case
case=1
input=5
7 2 3 4 12
output=9

Explanation:
Input: line1 is number of elements, followed by value for the elements in line2
Output: 9

case=2
input=5
8 1 2 3 5
output=0

case=3
input=6
1 3 2 4 7 14
output=9

case=4
input=5
5 3 15 8 4
output=17

case=5
input=7
4 3 6 5 2 8 7 
output=21



import java.util.*;
class test
{
    public static int triangle(int arr[],int n)
    {
        Arrays.sort(arr);
        if(n<3)
        {
            return 0;
        }
        else
        {
            for(int i=n-1;i>1;i--)
            {
                if(arr[i-2]+arr[i-1]>arr[i])
                {
                    return arr[i-2]+arr[i-1]+arr[i];
                }
            }
        }
        return 0;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        System.out.println(triangle(arr,n));
    }
}


King Arthur is stuck in the battlefield and sends message to his general David 
to rescue him. The message has the king’s location “base” (x,y) on a map which 
is in the form of cartesian coordinate system. King’s army units are placed at 
different location (x1, y1), (x2, y2) … (xn, yn) on the map. His general David 
has to figure out the minimum distance between the “base” and the army units 
and accordingly dispatch the unit which is the closest. The distance between 
the “base” and any army unit is calculated as absolute distance between the 
army unit location and base location, i.e. for first army unit (x1,y1), the 
absolute distance is |x1-x| + |y1-y\, for second unit (x2,y2), 
it is |x2-x| + |y2-y\ and so on.

The army unit has to be on the same line (horizontal or vertical) with that of 
the “base” location for the dispatch. Given a list of location of army units 
and the kings location (base), David has to provide the index of the unit he 
plans to dispatch. If two units have the same distance from the “base”, he has 
to provide the index of the unit that comes first in the list. If there are no 
units that can be dispatched then return -1. Your task is to help David in his 
task.

Input: 6
1 1
2 3
3 1
2 4
1 2
4 4
3 4 (base)
Output: 3


Explanation:
Input: line1 is number of points, followed by value for those points, followed 
by base point (x,y)
Output: 3

In the given points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, 
[2,4] and [4,4] have the smallest valid distance from base location, with a 
distance of 1. [2,4] has the smallest index, so return 3.

case=2
input=5
2 3
3 1
2 4
1 2
4 4
3 4
output=2

case=3
input=1
2 5
2 5
output=0

case=4
input=1
3 4
4 5
output=-1

case=5
input=6
4 4
1 1
2 3
3 1
2 4
1 2
3 4
output=0




import java.util.*;
class test
{
    public static int find(int arr[][],int x,int y)
    {
        int index=-1;
        int min=Integer.MAX_VALUE;
        for(int i=0;i<arr.length;i++)
        {
            int xd=arr[i][0];
            int yd=arr[i][1];
            int dis=Math.abs(xd-x)+Math.abs(yd-y);
            if((xd==x || yd==y) && dis<min)
            {
                min=dis;
                index=i;
            }
        }
        return index;
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[][]=new int[n][2];
        for(int i=0;i<n;i++)
        {
            arr[i][0]=sc.nextInt();
            arr[i][1]=sc.nextInt();
        }
        int x=sc.nextInt();
        int y=sc.nextInt();
        int close=find(arr,x,y);
        System.out.println(close);
    }
}


John loves shopping. He has some money in his purse and wants to buy few items. 
He is given a list of prices for the items and the amount to buy the items. The 
prices are arranged in non-decreasing order. With the amount he has, he can 
either buy any two items with no money left or no item at all. When he is able 
to buy two items, he wants to know the index of the selected items. If no items 
are purchased, return empty list. Your task is to help John in her task.

Sample test case
case=1
input=5
2 5 7 11 15
9
output=[0, 2]

case=2
input=5
2 5 7 11 15
14
output=[]

case=3
input=10
1 2 3 4 5 6 7 8 9 10
11
output=[0, 9]

case=4
input=6
2 3 4 4 5 6
8
output=[0, 5]




import java.util.*;
class test
{
    public static String sum(int arr[],int n,int target)
    {
        // HashMap<Integer,Integer> hm=new HashMap<>();
        ArrayList<Integer> res=new ArrayList<>();
        // for(int i=n-1;i>=0;i--)
        // {
        //     if(!hm.containsKey(target-arr[i]))
        //     {
        //         hm.put(arr[i],i);
        //     }
        //     else
        //     {
        //         res.add(0,i);
        //         res.add(1,hm.get(target-arr[i]));
        //         return res.toString();
        //     }
        // }
        // return res.toString();
        for(int i=0;i<n;i++)
        {
            for(int j=n-1;j>=0;j--)
            {
                if(arr[i]+arr[j]==target)
                {
                    res.add(i);
                    res.add(j);
                    return res.toString();
                }
            }
        }
        return res.toString();
    }
    public static void main (String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        System.out.println(sum(arr,n,target));
    }
}








