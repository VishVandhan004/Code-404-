1st Problem
/* write a programme to print the reverse of a number
sample input 
Enter an integer: 123                                                                                                   
Reversed number = 321   */      

#include <stdio.h>
int main() {
  int n;
  printf("Enter an integer: ");
  scanf("%d",&n);
  int rev=0;
  while(n>0)
  {
      int temp=n%10;
      rev=(rev*10)+temp;
      n=n/10;
  }
  printf("Reversed number = %d",rev);
}

2nd Problem
/* wrire a program to find factorial of a given number
input=
Enter an integer: 5    
output=
Factorial of 5 = 120 */

#include<stdio.h>
int fact(int n)
{
    if(n==1 || n==0)
    {
        return 1;
    }
    else
    {
        return n*fact(n-1);
    }
}
int main()
{
    int n;
    printf("Enter an integer: ");
    scanf("%d",&n);
    printf("Factorial of %d = %d",n,fact(n));
}

3rd Problem
/* Assume all the processes arrive at the same time.
FCFS CPU SCHEDULING ALGORITHM
Read the number of processes/jobs in the system, their CPU burst times.
The scheduling is performed on the basis of arrival time of the processes
irrespective of their other parameters. Each process will be executed according to its arrival time. 
Calculate the waiting time and turnaround time of each of the processes accordingly.
Hint: use this printf statements to match with the test cases:
printf("\t PROCESS \tBURST TIME \t WAITING TIME\t TURNAROUND TIME\n"); 
for(i=0;i<n;i++)
printf("\n\t P%d \t\t %d \t\t %d \t\t %d", i, bt[i], wt[i], tat[i]);
printf("\nAverage Waiting Time -- %f", wtavg/n); 
printf("\nAverage Turnaround Time -- %f", tatavg/n); 
sample output:
Enter the number of processes -- 4                                                                                      
Enter Burst Time for Process 0 --2                                                                                      
Enter Burst Time for Process 1 --5                                                                                     
Enter Burst Time for Process 2 --6                                                                                    
Enter Burst Time for Process 3 --8                                                                                      
PROCESS        BURST TIME       WAITING TIME    TURNAROUND TIME                                                
                                                                                                                                
P0              2               0               2                                                              
P1              5               2               7                                                              
P2              6               7               13                                                             
P3              8               13              21                                                             
Average Waiting Time -- 5.500000                                                                                        
Average Turnaround Time -- 10.750000 */

#include<stdio.h>
double avg(int arr[],int n)
{
    double sum=0;
    for(int i=0;i<n;i++)
    {
        sum=sum+arr[i];
    }
    return sum/n;
}
int main()
{
    int n;
    printf("Enter the number of processes -- ");
    scanf("%d",&n);
    printf("\n");
    int arrival[]={0,0,0,0};
    int burst[n];
    for(int i=0;i<n;i++)
    {
        printf("Enter Burst Time for Process %d --",i);
        scanf("%d",&burst[i]);
        printf("\n");
    }
    int turnaroundtime[n];
    int sum=0;
    for(int i=0;i<n;i++)
    {
        sum=sum+burst[i];
        turnaroundtime[i]=sum;
    }
    int waitingtime[n];
    for(int i=0;i<n;i++)
    {
        waitingtime[i]=turnaroundtime[i]-burst[i];
    }
    printf("PROCESS \t BURST TIME \t WAITING TIME \t TURNAROUND TIME \n");
    for(int i=0;i<n;i++)
    {
        printf("\nP%d \t\t %d \t\t %d \t\t %d",i,burst[i],waitingtime[i],turnaroundtime[i]);
    }
    printf("\n");
    printf("Average Waiting Time -- %f",avg(waitingtime,n));
    printf("\n");
    printf("Average Turnaround Time -- %f",avg(turnaroundtime,n));
}

4th Problem
/*Write a C Program to Simulate Shortest Job First CPU Scheduling Algorithm
 Consider Process name, arriavl time and execution time as an Input.
 Sample Input and Output
Enter the number of process:3                                                                                           
Enter process name, arrival time& execution time:1                                                                      
0                                                                                                                       
3                                                                                                                       
Enter process name, arrival time& execution time:2                                                                      
1                                                                                                                       
1                                                                                                                       
Enter process name, arrival time& execution time:3                                                                      
3                                                                                                                       
5                                                                                                                       
                                                                                                                        
Pname   arrivaltime     executiontime   waitingtime     tatime                                                          
2           1               1               0               1                                                           
1           0               3               2               5                                                           
3           3               5               2               7                                                           
Average waiting time is:1.333333                                                                                        
Average turnaroundtime is:4.333333 */   

#include<stdio.h>
#include<string.h>
int main()
{
    int et[20],at[10],n,i,j,temp,st[10],ft[10],wt[10],ta[10];
    int totwt=0,totta=0;
    float awt,ata;
    char pn[10][10],t[10];
    printf("Enter the number of process:");
    scanf("%d",&n);
    for(i=0; i<n; i++)
    {
        printf("Enter process name, arrival time& execution time:");
        scanf("%s%d%d",pn[i],&at[i],&et[i]);
    }
    for(i=0; i<n; i++)
        for(j=0; j<n; j++)
        {
            if(et[i]<et[j])
            {
                temp=at[i];
                at[i]=at[j];
                at[j]=temp;
                temp=et[i];
                et[i]=et[j];
                et[j]=temp;
                strcpy(t,pn[i]);
                strcpy(pn[i],pn[j]);
                strcpy(pn[j],t);
            }
        }
    for(i=0; i<n; i++)
    {
        if(i==0)
            st[i]=at[i];
        else
            st[i]=ft[i-1];
        wt[i]=st[i]-at[i];
        ft[i]=st[i]+et[i];
        ta[i]=ft[i]-at[i];
        totwt+=wt[i];
        totta+=ta[i];
    }
    awt=(float)totwt/n;
    ata=(float)totta/n;
    printf("\nPname\tarrivaltime\texecutiontime\twaitingtime\ttatime");
    for(i=0; i<n; i++)
        printf("\n%s\t%5d\t\t%5d\t\t%5d\t\t%5d",pn[i],at[i],et[i],wt[i],ta[i]);
    printf("\nAverage waiting time is:%f",awt);
    printf("\nAverage turnaroundtime is:%f",ata);
    return 0;
}

5th Problem
/* Program for Round Robin CPU Scheduling With Waiting Time 
     /* IMPLEMENTATION OF ROUND ROBIN SCHEDULING
     DESCRIPTION Each process gets a small unit of CPU time (time quantum), 
     usually 10-100 milliseconds. After this time has elapsed, the process is preempted 
    and added to the end of the ready queue. If there are n processes in the ready queue 
     and the time quantum is q, then each process gets 1/n of the CPU time in chunks of at most 
     q time units at once. No process waits more than (n 1)q time units. Performance q large: FIFO q small: q 
    must be large with respect to context switch, otherwise overhead is too high.*/
    /*Sample input and output:
    enter no of processes: 3                                                                                                
    enter the process name: p1                                                                                              
    enter the processing time: 6                                                                                            
    enter the process name: p2                                                                                              
    enter the processing time: 3                                                                                            
    enter the process name: p3                                                                                              
    enter the processing time: 9                                                                                            
   enter time slice: 3                                                                                                     
    process-name process-time waiting-time                                                                                  
     p1             6               6                                                                                       
     p2             3               3                                                                                       
     p3             9               9                                                                                       
     total waiting time = 18                                                                                                
     average waiting time =  6.000000                                                                                   
    */
   /* Write your program here */
   
   
#include <stdio.h>
void findWaitingTime(int processes[], int n, int burstTime[], int quantum, int waitingTime[], int turnaroundTime[]) {
    int remainingTime[n];
    for (int i = 0; i < n; i++) {
        remainingTime[i] = burstTime[i];
    }
    int currentTime = 0;
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (remainingTime[i] > 0) {
                done = 0;
                if (remainingTime[i] > quantum) {
                    currentTime += quantum;
                    remainingTime[i] -= quantum;
                } else {
                    currentTime += remainingTime[i];
                    waitingTime[i] = currentTime - burstTime[i];
                    remainingTime[i] = 0;
                    turnaroundTime[i] = currentTime;
                }
            }
        }
        if (done == 1)
            break;
    }
}
void findAverageTime(int processes[], int n, int burstTime[], int quantum) {
    int waitingTime[n], turnaroundTime[n];
    int totalWaitingTime = 0, totalTurnaroundTime = 0;
    findWaitingTime(processes, n, burstTime, quantum, waitingTime, turnaroundTime);
    printf("\nProcess   Burst Time   Waiting Time   Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
        printf("%d         %d            %d               %d\n", i + 1, burstTime[i], waitingTime[i], turnaroundTime[i]);
    }
    float avgWaitingTime = (float)totalWaitingTime / n;
    float avgTurnaroundTime = (float)totalTurnaroundTime / n;
    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
}

int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    int burstTime[n];
    printf("\nEnter the burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &burstTime[i]);
    }
    printf("\nEnter the time quantum: ");
    scanf("%d", &quantum);
    findAverageTime(NULL, n, burstTime, quantum);
    return 0;
}

6th Problem
/*
Implement Producer &Consumer problem using semaphore.
Producer consumer problem is also known as bounded buffer problem. In this problem we have two processes,4
producer and consumer, who share a fixed size buffer. Producer work is to produce data or items and put 
in buffer. Consumer work is to remove data from buffer and consume it. We have to make sure that producer 
do not produce data when buffer is full and consumer do not remove data when buffer is empty.
To solve this problem, we need two counting semaphores – Full and Empty. “Full” keeps track of number of 
items in the buffer at any given time and “Empty” keeps track of number of unoccupied slots.
Initialization of semaphores –
mutex = 1
Full = 0 // Initially, all slots are empty. Thus full slots are 0 
Empty = 3 // All slots are empty initially  and Maximum Size of the buffer is 3.
Give 3 choice to user
1. producer
2. consumer
3. exit
Smaple Input and output:
1.Producer
2.Consumer
3.Exit
Enter your choice:1
Producer produces the item 1
Enter your choice:1
Producer produces the item 2
Enter your choice:1
Producer produces the item 3
Enter your choice:1
Buffer is full!!
Enter your choice:2
Consumer consumes item 3
Enter your choice:2
Consumer consumes item 2
Enter your choice:2
    
Consumer consumes item 1
Enter your choice:2
Buffer is empty!!
Enter your choice:3
*/

#include <stdio.h>
int main() {
        printf("1.Producer\n");
        printf("2.Consumer\n");
        printf("3.Exit\n");
        int size = 3;
        int a = 0;
    while (1) {
        int ch;
        printf("Enter your choice:");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                a++;
                if (a <= size) {
                    printf("\nProducer produces the item %d\n", a);
                } else {
                    printf("Buffer is full!!\n");
                }
                break;
            case 2:
                a--;
                if (a > 0) {
                    printf("\nConsumer consumes item %d\n", a);
                } else {
                    printf("Buffer is empty!!\n");
                }
                break;
            case 3:
                return 0;
            default:
                printf("Invalid choice. Please enter 1, 2, or 3.\n");
        }
    }
    return 0;
}

7th Problem
/* 	Implement reader writer problem
The Problem Statement
There is a shared resource which should be accessed by multiple processes. 
There are two types of processes in this context. They are reader and writer. 
Any number of readers can read from the shared resource simultaneously, but only 
one writer can write to the shared resource. When a writer is writing data to the 
resource, no other process can access the resource. A writer cannot write to the 
resource if there are non zero number of readers accessing the resource at that time. 
*/
/*
SAMPLE INPUT AND OUTPUT:
1. Press 1 for writer                                                                                                   
2. Press 2 for reader                                                                                                   
3. Press 3 for exit                                                                                                     
Enter your choice:1                                                                                                                                                                                                     
The writer content number:1                                                                                            
Enter your choice:1                                                                                                                                                                                                                    
The writer content number:2                                                                                            
Enter your choice:1                                                                                                                                                                                                    
The writer content number:3                                                                                            
Enter your choice:2                                                                                                                                                                                                      
The reader content number:3                                                                                            
Enter your choice:2                                                                                                                                                                                                           
The reader content number:2                                                                                            
Enter your choice:3
*/
/* WRITE YOUR PROGRAM FROM HERE*/

#include <stdio.h>
int main() {
        printf("1. Press 1 for writer\n");
        printf("2. Press 2 for reader\n");
        printf("3. Press 3 for exit\n");
        int size = 3;
        int a = 0;
    while (1) {
        int ch;
        printf("Enter your choice:");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                a++;
                if (a <= size) {
                    printf("\nThe writer content number:%d\n", a);
                }
                break;
            case 2:
                if (a > 0) {
                    printf("\nThe reader content number:%d\n", a);
                }
                a--;
                break;
            case 3:
                return 0;
            default:
                printf("Invalid choice. Please enter 1, 2, or 3.\n");
        }
    }
    return 0;
}