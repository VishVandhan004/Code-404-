                                                ****  1st Problem   ****
Given an list of decimal numbers and an desired number, return the twin values in a such that their sum equals the desired number..
You can make the assumption that every input has exactly one answer, and you can avoid using the same element more than once.

Sample output:
4
1 8 11 15
target:9
0,1

#include<stdio.h> 
int main() 
{ 
    int i,values,target,n; 
    int arr[10]; 
    printf("enter the number of values:\n"); 
    scanf("%d",&n); 
    printf("enter the values:\n"); 
    for(int i=0; i<n; i++) 
    { 
        scanf("%d",&arr[i]); 
    } 
    printf("enter the target: \n"); 
    scanf("%d",&target); 
    for(int i=0; i<n; i++) 
    { 
        for(int j=i+1; j<n; j++) 
        { 
            if(arr[i] + arr[j]==target) 
            { 
                printf("%d,%d",i,j); 
            } 
        } 
    } 
}

                                                     ***** 2nd problem ******
/*Take three persons age from the user and print the Oldest Person out of three persons using Nested if. 
Sample Input: 
Enter the 1st person age: 25 
Enter the 2nd person age: 78 
Enter the 3rd person age: 87 
Expected Output : 
The oldest person is: 87 
*/ 
import java.util.*; 
class test{ 
    public static void main(String args[]) 
    { 
        int n,a,b,c; 
        Scanner sc=new Scanner(System.in); 
        System.out.print("Enter the 1st person age: "); 
        a = sc.nextInt(); 
        System.out.print("Enter the 2nd person age: "); 
        b=sc.nextInt(); 
        System.out.print("Enter the 3rd person age: "); 
        c=sc.nextInt(); 
        if(a>b) 
        { 
            if(a>c) 
            { 
                System.out.printf("The oldest person is %d",a); 
            } 
            else{ 
                System.out.printf("The oldest person is %d",c); 
            } 
        } 
        else { 
            System.out.printf("The oldest person is %d",b); 
          } 
        }  
    }

                                        ******** 3rd Problem   ******
/*Write a Java program that takes a year from user and print whether that year is a leap year or not.

Test Data
Enter the year: 2016
2016 is a leap year
*/

import java.util.*;
class test {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the year: ");
        int y = sc.nextInt();
                if(y%4==0)
                {
                    System.out.printf("%d is a leap year",y);
                }
    }
}
                                            ******** 4th Problem **********
/*take the different size of balls in array and find the second largest ball in array
Sample data:
Enter number of the balls: 5 
Enter balls with different sizes: 
2 3 7 6 9
Second largest ball = 7*/

import java.util.*;
class test{
    public static void main(String args[]){
        int n;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of the balls: ");
        n = sc.nextInt();
        int []arr = new int[n];
        System.out.println("Enter balls with different sizes:");
        for(int i=0;i<n;i++)
        {
            arr[i] = sc.nextInt();
        }
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(arr[i]>arr[j])
                {
                int temp;
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                }
            }
        }
        System.out.printf("Second largest ball = %d",arr[n-2]);
    }
}
                                                    ******* 5th Problem *********
In a theatre there are M rows and N seats in each row. 
The seats are numbered in a strange order (No duplicates). 
You need to find out the total sum of the seat numbers  
which are maximum in their columns. 
Input Format: 
------------- 
Line-1 -> Two integers M and N 
Next M lines -> N space separated integers, seat numbers. 
Output Format: 
-------------- 
Print an integer result. 
Sample Input-1: 
--------------- 
3 3 
3 7 18 
9 16 13 
15 11 17 
Sample Output-1: 
---------------- 
49 
Sample Input-2: 
--------------- 
3 4 
1 10 4 2 
9 3 18 17 
15 16 17 12 
Sample Output-2: 
---------------- 
66

#include<stdio.h>
int main(){
    int i,j,r,c,sum=0;
    scanf("%d %d",&r,&c);
    int arr[r][c];
    for(i=0;i<r;i++){
        for(j=0;j<c;j++){
        scanf("%d",&arr[i][j]);
        }
    }
    for(j=0;j<c;j++)
    {
      int max = arr[0][0];
     for(i=0;i<r;i++)
        {
            if(arr[i][j] > max){
                max = arr[i][j];
            }
        }
            sum = sum+max;
    }
    printf("%d",sum);
}                     
                                           *********** 6th Problem *****************
/* 
Given a string S in encoded form, and  an integer array indices[] of string length. 
You need to find the decoded form of String S,  
by moving each character at ith position in S, to indices[i] position in decoded string. 
and then print the decoded string. 
Input Format: 
------------- 
Line-1 -> A String S, enocded string of length L 
Line-2 -> L space separated integers indices[], where 0 <=indices[i] < L  
Output Format: 
-------------- 
Print a String, decoded string. 
Sample Input-1: 
--------------- 
aeilmmor 
6 1 5 7 2 0 3 4 
Sample Output-1: 
---------------- 
memorial 
Explanation: 
--------------- 
Given String, aeilmmor 
6 1 5 7 2 0 3 4 
after shifting,	memorial 
Sample Input-2: 
--------------- 
aidin 
4 3 2 0 1 
Sample Output-2: 
---------------- 
india 
Explanation-2: 
--------------- 
Given String, aidin 
4 3 2 0 1 
after shifting,	india 
*/

#include<stdio.h>
#include<string.h>
int main()
{
    char str[30];
    char str1[30];
    int i;
    scanf("%s",str);
    int arr[strlen(str)];
    for(int i=0;i<strlen(str);i++){
       scanf("%d",&arr[i]);
    }
    int j=0;
    for(int i=0;i<strlen(str);i++){
        j=arr[i];
        str1[j]=str[i];
    }
    for(i=0;i<strlen(str);i++){
        printf("%c",str1[i]);
    }
}

                                               ************* 7th Problem *******************
Given an integer array nums, find the  subarray  with the largest sum, and return its sum.
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.                    

class Solution {
    public int maxSubArray(int[] nums) {
     Scanner sc = new Scanner(System.in);
        int max_S = nums[0];
        int current_S = nums[0];
        for(int i=1;i<nums.length;i++)
        {
                current_S = Math.max(nums[i],current_S+nums[i]);
                max_S = Math.max(max_S,current_S);
        }
       return max_S;
    }
}
                           ********************* 8th Problem ******************
/*Bob given a task to Babe, i.e, Babe has to detect unique value in a given set of values by Bob
Example:
input=
8
12 25 8 12 43 5 8 43
output=
25 5
*/

#include<stdio.h>
int main() {
    int arr[20];
    int n,i,j;
    scanf("%d",&n);
    for(i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    for(i=0;i<n;i++){
        int count=0;
        for(j=0;j<n;j++){
            if(i!=j){
                if(arr[i] == arr[j]){
                    count++;
                }
            }
        }
        if(count==0){
            printf("%d ",arr[i]);
        }
    }
}                           
                      *********************** 9th Problem ************************
/*
Java Program To Calculate The Sum Of Array Elements By Taking Input Values from user

Sample Data:
Enter number of elements: 5
Enter array elements:
10 20 30 40 50
Sum of array elements= 150*/
import java.util.*;
class test
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of elements:");
        int n = sc.nextInt();
        int sum = 0;
        System.out.println("Enter array elements: ");
        int arr[] = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        for(int i=0;i<n;i++){
            sum = sum + arr[i];
        }
        System.out.print("Sum of array elements = "+ sum);
        
    }
}
                              ************************** 10th Problem *************************
/*read rows and colums of first and second matrix, 
then read elements into both matrix,perform addition of  
those two matrix and dispaly first,second and result matrix. 
input: 
2 
2 
2 
2 
1 
2 
3 
4 
1 
2 
3 
4 
output: 
1 2 
3 4 
1 2 
3 4 
2 4 
6 8 
input= 
2 
3 
2 
2 
output= 
Addition would not be possible 
*/ 
import java.util.*; 
class test 
{ 
    public static void main(String args[]) 
    { 
       Scanner sc = new Scanner(System.in); 
       int row1 = sc.nextInt(); 
       int col1 = sc.nextInt(); 
       int row2 = sc.nextInt(); 
       int col2 = sc.nextInt(); 
     if(row1!=row2 || col1!=col2) 
     { 
         System.out.println("Addition would not be possible"); 
         System.exit(0); 
     } 
       int a1[][] = new int[row1][col1]; 
       int a2[][] = new int[row2][col2]; 
        
       for(int i=0;i<row1;i++){ 
           for(int j=0;j<col1;j++){ 
               a1[i][j] = sc.nextInt(); 
           } 
       } 
       for(int i=0;i<row2;i++){ 
           for(int j=0;j<col2;j++){ 
               a2[i][j] = sc.nextInt(); 
           } 
       } 
       for(int i=0;i<row1;i++){ 
           for(int j=0;j<col1;j++){ 
               System.out.print(a1[i][j] + " "); 
           } 
           System.out.println(); 
       } 
       for(int i=0;i<row2;i++){ 
           for(int j=0;j<col2;j++){ 
               System.out.print(a2[i][j] + " "); 
           } 
               System.out.println(); 
       } 
     if(row1 == row2 && col1 == col2) 
     { 
       for(int i=0;i<row1;i++){ 
           for(int j=0;j<col1;j++){ 
               System.out.println(a2[i][j] + a1[i][j]); 
           } 
       } 
     } 
        
   } 
}                   
                                ****************** 11th Problem ********************
/* Wrie a Java program  that will test if a string is a valid PIN or not 
A valid PIN has:

Exactly 4 or 6 characters.
Only numeric characters (0-9).
No whitespace.
Example1:
121317
true

Example2:
45135
false
*/

import java.util.*;
class test
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        String PIN = sc.nextLine();
        int len = PIN.length();
        if(len !=4 && len != 6 ) {
            System.out.println("false");
            return;
        }
        for(int i=0;i<len;i++)
        {
            int temp = (int)PIN.charAt(i);
            if(!(temp>=48) || !(temp<=57))
            {
                System.out.println("False");
                return;
            }
        }
        System.out.println("True");

    }
}

                              ********************** 12th Problem *********************
/*
Cliff Shaw is working on the singly linked list.
He is given a list of boxes arranged as singly linked list, where each box is 
printed with a positive number on it and arranged in the list are ascending order.
and numbers on the boxes may be repeated.

Mr Cliff Shaw is performing an operation on the list.
	-  To have only the distinct values in the final list,
	removed all duplicate values.

Your task is to help Mr Cliff to perform the operation and return the updated list

Input Format:
-------------
Line-1: An integer, N number of boxes in list.
Line-2: N space separated integers, boxes as list.

Output Format:
--------------
Print the updated list.


Sample Input-1:
---------------
8
1 1 1 2 2 3 3 4

Sample Output-1:
----------------
1 2 3 4


Sample Input-2:
---------------
5
1 1 1 1 1

Sample Output-2:
----------------
1

import java.util.*;
class test {
    public static void main(String args[]){
        LinkedList<Integer> ll = new LinkedList<Integer>();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i = 0;i<n;i++){
        int e = sc.nextInt();
        ll.add(e);
        }
        LinkedList<Integer> newlist = new LinkedList<Integer>();
        for(Integer ele:ll){
            if(!newlist.contains(ele)) {
                newlist.add(ele);
            }
        }
        System.out.print(newlist);
    }
}
                               ********************* 13th Problem *********************
/*
Cliff Shaw is working on the singly linked list.
He is given a list of boxes arranged as singly linked list, where each box is 
printed with a positive number on it and arranged in the list are ascending order.
and numbers on the boxes may be repeated.

Mr Cliff Shaw is performing an operation on the list.
	-  To have only the distinct values in the final list,
	removed all duplicate values.

Your task is to help Mr Cliff to perform the operation and return the updated list

Input Format:
-------------
Line-1: An integer, N number of boxes in list.
Line-2: N space separated integers, boxes as list.

Output Format:
--------------
Print the updated list.


Sample Input-1:
---------------
8
1 1 1 2 2 3 3 4

Sample Output-1:
----------------
1 2 3 4


Sample Input-2:
---------------
5
1 1 1 1 1

Sample Output-2:
----------------
1

import java.util.*;
class test {
    public static void main(String args[]){
        LinkedList<Integer> ll = new LinkedList<Integer>();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i = 0;i<n;i++){
        int e = sc.nextInt();
        ll.add(e);
        }
        LinkedList<Integer> newlist = new LinkedList<Integer>();
        for(Integer ele:ll){
            if(!newlist.contains(ele)) {
                newlist.add(ele);
            }
        }
        System.out.print(newlist);
    }
}
                                ********************** 14th Problem ********************
/*
There is a railway route from Vizag to Hyderabad.
The stations in the route will be identified by the codes(may be repeated).
You will be given the list of station codes, using singly linked list implementation
find the middle station in the given route.
If there are even number of stations, print the second middle station.
Your task is to find the middle station code in the given train route.
NOTE: You shoud pass only the head node to the method/function 
to find the middle station in that route.
Input Format:
-------------
Line-1: space separated integers, station codes.
Output Format:
--------------
Print an integer, middle station code.
Sample Input-1:
---------------
5
1 2 3 4 5
Sample Output-1:
----------------
3
Sample Input-2:
---------------
6
1 2 3 4 5 6
Sample Output-2:
----------------
4
Explanation:
-------------
We have even number of stations, so the second middle station is 4

import java.util.*;
class test
{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        LinkedList<Integer> ll = new LinkedList <Integer> ();
        for(int i=0;i<a;i++){
            int b = sc.nextInt();
            ll.add(b);
        }
        int half = a/2;
        System.out.println(ll.get(half));
    }
}                                
                          **************** 15th Problem ***************
/*Ram is playing a game of identifying the pairs of numbers from the givenlist of numbers.
Help Ram to identify the number of pairs which satisfy the following criteria
list[i]=list[j] and i<j
Example 1:
Input:6
1 2 3 1 1 3
Output: 4
Explanation: There are 4 pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:
Input:4
1 1 1 1
Output: 6
Explanation: Each pair in the array are satisfying the given constraint.
Example 3:
Input:3
1,2,3
Output: 0
Explanation: The array does not have any element that are equal to each other.
*/

import java.util.*;
class test{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int a,b;
        int arr[] = new int[num];
        for(a=0;a<num;a++){
            arr[a] = sc.nextInt();
        }
        int count = 0;
        for(a=0;a<num;a++){
            for(b=a+1;b<num;b++){
                if(arr[a] == arr[b]){
                    count++;
                }
            }
        }
        System.out.println(count);
        
    }
}                      
                 ************************* 16th Problem ***********************
 /*Given an list of numbers, return the highest common factor of the smallest number and bigest number in list 
The highest common factor of two numbers is the biggest positive number that evenly divides both numbers. 
sample 1: 
Input: numberss = 2 9 6 5 12 
Output: 2 
Explanation: 
The smallest number in list is 2. 
The largest number in list is 12. 
The highest common factor of 2 and 12 is 2. 
*/

import java.util.*;
class test
{
    public static void main(String args[])
    {
       Scanner sc = new Scanner(System.in);
       try 
       {
           
        String str = sc.nextLine();
        String[] stArr = str.split(" ");
        int len = stArr.length;
        int[] arr = new int[len];
        for(int i=0;i<len;i++){
           int n = Integer.parseInt(stArr[i]);
           arr[i] = n;
       }
       Arrays.sort(arr);
        int min = arr[0];
        int max = arr[len-1];
        int HCF = 0;
        for(int i=1;i<=min || i<= max ;i++){
            if(min%i == 0 && max%i == 0){
                HCF = i;
            }
        }
        System.out.println(HCF);
    }
       finally {
           
           sc.close();
       }
   }
}                
                     *********************** 17th problem ***********************
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.                     
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

class Solution {
    public int search(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[mid] >= nums[low]) { // left half is sorted
                if (target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else { // right half is sorted
                if (target <= nums[high] && target > nums[mid]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
}
                 ********** 18th Problem  ************
Given an array of N integers where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are m students, the task is to distribute chocolate packets such that: 
Each student gets one packet.
The difference between the number of chocolates in the packet with maximum chocolates and the packet with minimum chocolates given to the students is minimum.
Examples:
Input : arr[] = {7, 3, 2, 4, 9, 12, 56} , m = 3 
Output: Minimum Difference is 2 
Explanation:
We have seven packets of chocolates and we need to pick three packets for 3 students 
If we pick 2, 3 and 4, we get the minimum difference between maximum and minimum packet sizes.
Input : arr[] = {3, 4, 1, 9, 56, 7, 9, 12} , m = 5 
Output: Minimum Difference is 6 

import java.util.*;
public class Test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of an array:");
        int n = sc.nextInt();
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        System.out.println("Enter the no.of students");
        int m = sc.nextInt();
        Arrays.sort(arr);
        int min =Integer.MAX_VALUE;
        for(int i=0;i<=n-m;i++)
        {
            int diff = arr[i+m-1] - arr[i];
            if(diff<min)
            {
                min = diff;
            }
        }
        System.out.printf("Difference is %d",min);
    }
}
                            ***************** 19th Problem ********************
/*You have given N bricks. 
You need to construct a staircase as follows: 
1. = 
2. == 
3. === 
4. ==== 
Where = indicates one brick. 
Another condition is row-1 should have 1 brick, row-2 should have 2 bricks and so on. 
i.e., i-th row should have 'i' bricks. 
Your task is to findout total number of staircases can be formed with the given condition. 
Input Format: 
------------- 
 An integer N 
Output Format: 
-------------- 
Print an integers, number of staircases 
Sample Input-1: 
--------------- 
 5 
Sample Output-1: 
---------------- 
2 
Explanation: 
------------ 
row-1:	= 
row-2:	== 
row-3:	== 
Only 2 rows satisfies the condition. 
Sample Input-2: 
--------------- 
 8 
Sample Output-2: 
---------------- 
3 
Explanation: 
------------ 
row-1:	= 
row-2:	== 
row-3:	=== 
row-4:	== 
Only 3 rows satisfies the condition. 
*/

import java.util.*;
class test {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int row = sc.nextInt();
        int i=0;
        int count = 0;;
        for(i=1;i<=row;i++){
            int bricks = (i*(i+1))/2;
            if(bricks>row){
                break;
            }
            else {
                count++;
            }
        }
        System.out.print(count);
    }
}
 or 
import java.util.*;
class test {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int row = sc.nextInt();
        int i=1;
        int count = 0;
        while(row>=i){
            row = row - i;
            i++;
            count++;
        }
        System.out.print(count);
    }
}    
          ****************************** 20th Problem *************           
 /*Ranga rao sir asked a student to find duration among Mid1 and Mid2 exam dates. 
read both dates in string format, i.e, year-month-date as given in sample data. 
sample data1 
-------------- 
input: 
"2020-06-28" 
"2020-06-29" 
output:1 
sample data2 
-------------- 
Input:  
"2019-01-14" 
"2018-12-30" 
Output: 15 
*/

import java.util.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
class test{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        String s1 = sc.nextLine();
        String s2 = sc.nextLine();
        LocalDate a1 = LocalDate.parse(s1);
        LocalDate a2 = LocalDate.parse(s2);
        long dura = ChronoUnit.DAYS.between(a1,a2);
        System.out.println(dura);
    }
}                      