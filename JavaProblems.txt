                                              ****  1st Problem   ****
Given an list of decimal numbers and an desired number, return the twin values in a such that their sum equals the desired number..
You can make the assumption that every input has exactly one answer, and you can avoid using the same element more than once.

Sample output:
4
1 8 11 15
target:9
0,1

#include<stdio.h> 
int main() 
{ 
    int i,values,target,n; 
    int arr[10]; 
    printf("enter the number of values:\n"); 
    scanf("%d",&n); 
    printf("enter the values:\n"); 
    for(int i=0; i<n; i++) 
    { 
        scanf("%d",&arr[i]); 
    } 
    printf("enter the target: \n"); 
    scanf("%d",&target); 
    for(int i=0; i<n; i++) 
    { 
        for(int j=i+1; j<n; j++) 
        { 
            if(arr[i] + arr[j]==target) 
            { 
                printf("%d,%d",i,j); 
            } 
        } 
    } 
}

                                                     ***** 2nd problem ******
/*Take three persons age from the user and print the Oldest Person out of three persons using Nested if. 
Sample Input: 
Enter the 1st person age: 25 
Enter the 2nd person age: 78 
Enter the 3rd person age: 87 
Expected Output : 
The oldest person is: 87 
*/ 
import java.util.*; 
class test{ 
    public static void main(String args[]) 
    { 
        int n,a,b,c; 
        Scanner sc=new Scanner(System.in); 
        System.out.print("Enter the 1st person age: "); 
        a = sc.nextInt(); 
        System.out.print("Enter the 2nd person age: "); 
        b=sc.nextInt(); 
        System.out.print("Enter the 3rd person age: "); 
        c=sc.nextInt(); 
        if(a>b) 
        { 
            if(a>c) 
            { 
                System.out.printf("The oldest person is %d",a); 
            } 
            else{ 
                System.out.printf("The oldest person is %d",c); 
            } 
        } 
        else { 
            System.out.printf("The oldest person is %d",b); 
        } 
         
             
        } 
         
    }

               ********   3rd Problem ******

