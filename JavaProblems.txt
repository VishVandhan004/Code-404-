                                                ****  1st Problem   ****
Given an list of decimal numbers and an desired number, return the twin values in a such that their sum equals the desired number..
You can make the assumption that every input has exactly one answer, and you can avoid using the same element more than once.

Sample output:
4
1 8 11 15
target:9
0,1

#include<stdio.h> 
int main() 
{ 
    int i,values,target,n; 
    int arr[10]; 
    printf("enter the number of values:\n"); 
    scanf("%d",&n); 
    printf("enter the values:\n"); 
    for(int i=0; i<n; i++) 
    { 
        scanf("%d",&arr[i]); 
    } 
    printf("enter the target: \n"); 
    scanf("%d",&target); 
    for(int i=0; i<n; i++) 
    { 
        for(int j=i+1; j<n; j++) 
        { 
            if(arr[i] + arr[j]==target) 
            { 
                printf("%d,%d",i,j); 
            } 
        } 
    } 
}

                                                     ***** 2nd problem ******
/*Take three persons age from the user and print the Oldest Person out of three persons using Nested if. 
Sample Input: 
Enter the 1st person age: 25 
Enter the 2nd person age: 78 
Enter the 3rd person age: 87 
Expected Output : 
The oldest person is: 87 
*/ 
import java.util.*; 
class test{ 
    public static void main(String args[]) 
    { 
        int n,a,b,c; 
        Scanner sc=new Scanner(System.in); 
        System.out.print("Enter the 1st person age: "); 
        a = sc.nextInt(); 
        System.out.print("Enter the 2nd person age: "); 
        b=sc.nextInt(); 
        System.out.print("Enter the 3rd person age: "); 
        c=sc.nextInt(); 
        if(a>b) 
        { 
            if(a>c) 
            { 
                System.out.printf("The oldest person is %d",a); 
            } 
            else{ 
                System.out.printf("The oldest person is %d",c); 
            } 
        } 
        else { 
            System.out.printf("The oldest person is %d",b); 
          } 
        }  
    }

                                        ********   3rd Problem ******
/*Write a Java program that takes a year from user and print whether that year is a leap year or not.

Test Data
Enter the year: 2016
2016 is a leap year
*/

import java.util.*;
class test {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the year: ");
        int y = sc.nextInt();
                if(y%4==0)
                {
                    System.out.printf("%d is a leap year",y);
                }
    }
}
                                            ******** 4th Problem **********
/*take the different size of balls in array and find the second largest ball in array
Sample data:
Enter number of the balls: 5 
Enter balls with different sizes: 
2 3 7 6 9
Second largest ball = 7*/

import java.util.*;
class test{
    public static void main(String args[]){
        int n;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of the balls: ");
        n = sc.nextInt();
        int []arr = new int[n];
        System.out.println("Enter balls with different sizes:");
        for(int i=0;i<n;i++)
        {
            arr[i] = sc.nextInt();
        }
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(arr[i]>arr[j])
                {
                int temp;
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                }
            }
        }
        System.out.printf("Second largest ball = %d",arr[n-2]);
    }
}
                                                    ******* 5th Problem *********
In a theatre there are M rows and N seats in each row. 
The seats are numbered in a strange order (No duplicates). 
You need to find out the total sum of the seat numbers  
which are maximum in their columns. 
Input Format: 
------------- 
Line-1 -> Two integers M and N 
Next M lines -> N space separated integers, seat numbers. 
Output Format: 
-------------- 
Print an integer result. 
Sample Input-1: 
--------------- 
3 3 
3 7 18 
9 16 13 
15 11 17 
Sample Output-1: 
---------------- 
49 
Sample Input-2: 
--------------- 
3 4 
1 10 4 2 
9 3 18 17 
15 16 17 12 
Sample Output-2: 
---------------- 
66

#include<stdio.h>
int main(){
    int i,j,r,c,sum=0;
    scanf("%d %d",&r,&c);
    int arr[r][c];
    for(i=0;i<r;i++){
        for(j=0;j<c;j++){
        scanf("%d",&arr[i][j]);
        }
    }
    for(j=0;j<c;j++)
    {
      int max = arr[0][0];
     for(i=0;i<r;i++)
        {
            if(arr[i][j] > max){
                max = arr[i][j];
            }
        }
            sum = sum+max;
    }
    printf("%d",sum);
}                     
                         *********** 6th Problem *****************
/* 
Given a string S in encoded form, and  an integer array indices[] of string length. 
You need to find the decoded form of String S,  
by moving each character at ith position in S, to indices[i] position in decoded string. 
and then print the decoded string. 
Input Format: 
------------- 
Line-1 -> A String S, enocded string of length L 
Line-2 -> L space separated integers indices[], where 0 <=indices[i] < L  
Output Format: 
-------------- 
Print a String, decoded string. 
Sample Input-1: 
--------------- 
aeilmmor 
6 1 5 7 2 0 3 4 
Sample Output-1: 
---------------- 
memorial 
Explanation: 
--------------- 
Given String, aeilmmor 
6 1 5 7 2 0 3 4 
after shifting,	memorial 
Sample Input-2: 
--------------- 
aidin 
4 3 2 0 1 
Sample Output-2: 
---------------- 
india 
Explanation-2: 
--------------- 
Given String, aidin 
4 3 2 0 1 
after shifting,	india 
*/

#include<stdio.h>
#include<string.h>
int main()
{
    char str[30];
    char str1[30];
    int i;
    scanf("%s",str);
    int arr[strlen(str)];
    for(int i=0;i<strlen(str);i++){
       scanf("%d",&arr[i]);
    }
    int j=0;
    for(int i=0;i<strlen(str);i++){
        j=arr[i];
        str1[j]=str[i];
    }
    for(i=0;i<strlen(str);i++){
        printf("%c",str1[i]);
    }
}

                                            ************* 7th Problem *******************
Given an integer array nums, find the  subarray  with the largest sum, and return its sum.
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.                    

class Solution {
    public int maxSubArray(int[] nums) {
     Scanner sc = new Scanner(System.in);
        int max_S = nums[0];
        int current_S = nums[0];
        for(int i=1;i<nums.length;i++)
        {
                current_S = Math.max(nums[i],current_S+nums[i]);
                max_S = Math.max(max_S,current_S);
        }
       return max_S;
    }
}
                           ********************* 8th Problem ******************
/*Bob given a task to Babe, i.e, Babe has to detect unique value in a given set of values by Bob

Example:
input=
8
12 25 8 12 43 5 8 43

output=
25 5
*/

#include<stdio.h>
int main() {
    int arr[20];
    int n,i,j;
    scanf("%d",&n);
    for(i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    for(i=0;i<n;i++){
        int count=0;
        for(j=0;j<n;j++){
            if(i!=j){
                if(arr[i] == arr[j]){
                    count++;
                }
            }
        }
        if(count==0){
            printf("%d ",arr[i]);
        }
    }
}                           
